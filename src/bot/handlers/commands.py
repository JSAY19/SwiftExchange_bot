# -------------------- –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã --------------------
from aiogram import Router, types, F
from aiogram.filters import Command
from src.bot.keyboards.reply_keyboards import get_main_keyboard
import src.bot.keyboards.inline_keyboards as inline_keyboards
from datetime import datetime, timedelta
import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
import logging
from .colors_logs import *
from .colors_logs import get_user_display

USDT_TO_THB_RATE = 35
RUB_TO_THB_RATE = 2.5

router = Router()

# -------------------- –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------------------

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        logging.info(f"User {get_user_display(message.from_user)} /start.")
        # –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        output_path = "pictures/XchangerBot_bright.png"
        photo = FSInputFile(output_path)
        await message.answer_photo(
            photo=photo,
            caption="üè¶ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–µ, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–±–º–µ–Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π, USDT, THB.\n" 
                    "üíé –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º, —á—Ç–æ–±—ã –í—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫ –Ω–∞–º.\n"
                    "üí¨ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @...",
            reply_markup=get_main_keyboard()
        ) 
    except FileNotFoundError:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_path}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(F.text == "üí∞ –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
async def exchange_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω'.")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_main: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data == "exchange_main")
async def exchange_main_back(callback_query: types.CallbackQuery):
    await safe_edit_text(
        callback_query.message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=inline_keyboards.get_exchange_main_keyboard()
    )
    await callback_query.answer()

@router.message(F.text == "üë©‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å")
async def get_profile_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–ü—Ä–æ—Ñ–∏–ª—å'.")
        await message.answer(
            f"üí¢–í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüí¢\n\nüí´–í–∞—à id: {message.from_user.id}\n üí´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤: üéàüéà \n",
            reply_markup=inline_keyboards.get_profile_main_user_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_profile_main: {str(e)}")
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ message")

@router.message(F.text == "‚ú® –û—Ç–∑—ã–≤—ã")
async def go_to_reviews(message: types.Message):
    await message.answer(
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º –æ–±–º–µ–Ω–Ω–∏–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: \n\n"
        "üëâ <a href='https://t.me/+w1iU4eQUG_oyYTIy'>–û—Ç–∑—ã–≤—ã | Xchanger</a>",
        parse_mode="HTML"
    )

# -------------------- –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–º–µ–Ω–∞ --------------------

## --- 1. –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---

@router.callback_query(F.data == "exchange_usdt_or_rub")
async def exchange_usdt(callback_query: types.CallbackQuery):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª –æ–±–º–µ–Ω USDT or RUB.")
        await safe_edit_text(
            callback_query.message,
            "üìåTHB\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
            reply_markup=inline_keyboards.get_usdt_rub_directions_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_usdt_or_rub: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "usdt_to_thb")
async def usdt_to_thb(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª USDT ‚Üí THB.")
        await state.update_data(exchange_type="USDT->THB")
        await safe_edit_text(
            callback_query.message,
            "<b>üéà–í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞üéà</b>\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû",
            reply_markup=inline_keyboards.get_exchange_type_keyboard(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ usdt_to_thb: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")

@router.callback_query(F.data == "rub_to_thb")
async def rub_to_thb(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª RUB ‚Üí THB.")
        await state.update_data(exchange_type="RUB->THB")
        await safe_edit_text(
            callback_query.message,
            "<b>üéà–í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞üéà</b>\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû",
            reply_markup=inline_keyboards.get_exchange_type_keyboard_rub_to_thb(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ rub_to_thb: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")

## --- 2. USDT ‚Üí THB ---

@router.callback_query(F.data.in_(["exchange_in_ATM", "exchange_in_hotel"]))
async def show_atm_or_hotel(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "exchange_in_ATM":
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ"
    else:
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
    await state.update_data(receive_type=receive_type, input_type="input_usdt")
    text = (
        "<b>–û–±–º–µ–Ω</b>\n\n"
        "–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
        f"{receive_type}\n"
        f"–ö—É—Ä—Å: <b>1 USDT = {USDT_TO_THB_RATE} THB</b>\n"
        "–°–µ—Ç—å: TRC20\n"
        "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
        "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:"
    )
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=inline_keyboards.get_usdt_to_thb_keyboard(),
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(F.data.in_(["enter_thb_amount", "enter_usdt_amount"]))
async def switch_currency_usdt(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    receive_type = data.get("receive_type", "")
    exchange_type = data.get("exchange_type", "USDT->THB")
    if callback_query.data == "enter_thb_amount":
        await state.update_data(input_type="input_thb")
        text = (
            "<b>–û–±–º–µ–Ω</b>\n\n"
            "–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: <b>1 USDT = {USDT_TO_THB_RATE} THB</b>\n"
            "–°–µ—Ç—å: TRC20\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:"
        )
        reply_markup = inline_keyboards.get_thb_to_usdt_keyboard()
    else:
        await state.update_data(input_type="input_usdt")
        text = (
            "<b>–û–±–º–µ–Ω</b>\n\n"
            "–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: <b>1 USDT = {USDT_TO_THB_RATE} THB</b>\n"
            "–°–µ—Ç—å: TRC20\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:"
        )
        reply_markup = inline_keyboards.get_usdt_to_thb_keyboard()
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    await callback_query.answer()

## --- 3. RUB ‚Üí THB ---

@router.callback_query(F.data.in_(["exchange_in_ATM_rub", "exchange_in_hotel_rub"]))
async def show_atm_or_hotel_rub(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "exchange_in_ATM_rub":
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ"
    else:
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
    await state.update_data(receive_type=receive_type, input_type="input_rub")
    text = (
        "<b>–û–±–º–µ–Ω</b>\n\n"
        "–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
        f"{receive_type}\n"
        f"–ö—É—Ä—Å: <b>1 RUB = {1/RUB_TO_THB_RATE:.4f} THB</b>\n"
        "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
        "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É RUB, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:"
    )
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=inline_keyboards.get_rub_to_thb_keyboard(),
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(F.data.in_(["enter_thb_amount_rub", "enter_rub_amount"]))
async def switch_currency_rub(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    receive_type = data.get("receive_type", "")
    exchange_type = data.get("exchange_type", "RUB->THB")
    if callback_query.data == "enter_thb_amount_rub":
        await state.update_data(input_type="input_thb")
        text = (
            "<b>–û–±–º–µ–Ω</b>\n\n"
            "–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: <b>1 RUB = {1/RUB_TO_THB_RATE:.4f} THB</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:"
        )
        reply_markup = inline_keyboards.get_thb_to_rub_keyboard()
    else:
        await state.update_data(input_type="input_rub")
        text = (
            "<b>–û–±–º–µ–Ω</b>\n\n"
            "–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: <b>1 RUB = {1/RUB_TO_THB_RATE:.4f} THB</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É RUB, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:"
        )
        reply_markup = inline_keyboards.get_rub_to_thb_keyboard()
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    await callback_query.answer()

# --- –í–≤–æ–¥ —Å—É–º–º—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---

@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_amount_input(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        receive_type = data.get("receive_type", "")
        exchange_type = data.get("exchange_type", "USDT->THB")
        input_type = data.get("input_type", "input_usdt")
        commission_text = ""
        commission = 0
        in_currency = "USDT"
        out_currency = "THB"
        rate = USDT_TO_THB_RATE if exchange_type == "USDT->THB" else RUB_TO_THB_RATE
        amount_in = 0
        amount_out = 0

        if exchange_type == "USDT->THB":
            if input_type == "input_thb":
                amount_thb = amount
                amount_usdt = amount_thb / USDT_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 / USDT_TO_THB_RATE
                    amount_usdt += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} USDT)"
                amount_in = amount_usdt
                amount_out = amount_thb
            else:
                amount_usdt = amount
                amount_thb = amount_usdt * USDT_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 / USDT_TO_THB_RATE
                    amount_usdt += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} USDT)"
                amount_in = amount_usdt
                amount_out = amount_thb
        elif exchange_type == "RUB->THB":
            in_currency = "RUB"
            if input_type == "input_thb":
                amount_thb = amount
                amount_rub = amount_thb * RUB_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 * RUB_TO_THB_RATE
                    amount_rub += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} RUB)"
                amount_in = amount_rub
                amount_out = amount_thb
            else:
                amount_rub = amount
                amount_thb = amount_rub / RUB_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 * RUB_TO_THB_RATE
                    amount_rub += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} RUB)"
                amount_in = amount_rub
                amount_out = amount_thb

        await state.update_data(
            amount_in=amount_in,
            amount_out=amount_out,
            commission=commission,
            commission_text=commission_text,
            in_currency=in_currency,
            out_currency=out_currency,
            rate=rate
        )

        text = (
            f"<b>–û–±–º–µ–Ω</b>\n\n"
            f"–ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: <b>1 {in_currency} = {rate} {out_currency}</b>\n"
            f"–í—ã –æ—Ç–¥–∞—ë—Ç–µ: {amount_in:.2f} {in_currency}{commission_text}\n"
            f"–ü–æ–ª—É—á–∞–µ—Ç–µ: {amount_out:.2f} {out_currency}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–º–µ–Ω:"
        )
        await message.answer(
            text,
            reply_markup=inline_keyboards.get_confirm_exchange_keyboard(),
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.",
            reply_markup=inline_keyboards.get_usdt_to_thb_keyboard()
        )

@router.callback_query(F.data == "confirm_exchange")
async def confirm_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        user = callback_query.from_user
        tg_id = user.id
        username = user.username or "-"
        exchange_type = data.get("exchange_type", "")
        receive_type = data.get("receive_type", "")
        amount_in = data.get("amount_in")
        amount_out = data.get("amount_out")
        commission_text = data.get("commission_text", "")
        in_currency = data.get("in_currency", "")
        out_currency = data.get("out_currency", "")
        rate = data.get("rate", "")
        text = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (tg_id: {tg_id})\n"
            f"–¢–∏–ø –æ–±–º–µ–Ω–∞: {exchange_type}\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: 1 {in_currency} = {rate} {out_currency}\n"
            f"–û—Ç–¥–∞—ë—Ç: {amount_in:.2f} {in_currency}{commission_text}\n"
            f"–ü–æ–ª—É—á–∞–µ—Ç: {amount_out:.2f} {out_currency}\n"
        )
        await callback_query.bot.send_message(6659909595, text)
        await safe_edit_text(
            callback_query.message,
            "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "cancel_exchange")
async def cancel_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await safe_edit_text(callback_query.message,
            "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "confirm_exchange_rub")
async def confirm_exchange_rub(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        user = callback_query.from_user
        tg_id = user.id
        username = user.username or "-"
        exchange_type = data.get("exchange_type", "")
        receive_type = data.get("receive_type", "")
        amount_in = data.get("amount_in")
        amount_out = data.get("amount_out")
        commission_text = data.get("commission_text", "")
        in_currency = data.get("in_currency", "")
        out_currency = data.get("out_currency", "")
        rate = data.get("rate", "")
        text = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (tg_id: {tg_id})\n"
            f"–¢–∏–ø –æ–±–º–µ–Ω–∞: {exchange_type}\n"
            f"{receive_type}\n"
            f"–ö—É—Ä—Å: 1 {in_currency} = {rate} {out_currency}\n"
            f"–û—Ç–¥–∞—ë—Ç: {amount_in:.2f} {in_currency}{commission_text}\n"
            f"–ü–æ–ª—É—á–∞–µ—Ç: {amount_out:.2f} {out_currency}\n"
        )
        await callback_query.bot.send_message(6659909595, text)
        await safe_edit_text(
            callback_query.message,
            "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "cancel_exchange_rub")
async def cancel_exchange_rub(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await safe_edit_text(callback_query.message,
            "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.",
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å</b>\n\n",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# -------------------- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------------------

async def safe_edit_text(message, *args, **kwargs):
    try:
        await message.edit_text(*args, **kwargs)
    except Exception as e:
        if "message is not modified" in str(e):
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text: {str(e)}")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    