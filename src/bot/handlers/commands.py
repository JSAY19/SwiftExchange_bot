# -------------------- –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã --------------------
from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from src.bot.keyboards.reply_keyboards import get_main_keyboard
import src.bot.keyboards.inline_keyboards as inline_keyboards
from datetime import datetime, timedelta
import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
import logging
from .colors_logs import *
from .colors_logs import get_user_display
import uuid
import os
import json

USDT_TO_THB_RATE = 35
RUB_TO_THB_RATE = 2.5

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
CURRENT_REQUEST_ID = 1

def get_next_request_id():
    global CURRENT_REQUEST_ID
    CURRENT_REQUEST_ID += 1
    return CURRENT_REQUEST_ID

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–±–º–µ–Ω–æ–≤
EXCHANGE_HISTORY_FILE = "exchange_history.json"

def load_exchange_history():
    if os.path.exists(EXCHANGE_HISTORY_FILE):
        with open(EXCHANGE_HISTORY_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_exchange_history(history):
    with open(EXCHANGE_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=4)

def add_exchange_to_history(user_id: int, exchange_data: dict):
    history = load_exchange_history()
    if str(user_id) not in history:
        history[str(user_id)] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–±–º–µ–Ω–∞
    exchange_data['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    history[str(user_id)].append(exchange_data)
    save_exchange_history(history)

# -------------------- –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------------------

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        logging.info(f"User {get_user_display(message.from_user)} /start.")
        # –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        output_path = "pictures/XchangerBot_bright.png"
        photo = FSInputFile(output_path)
        await message.answer_photo(
            photo=photo,
            caption="üè¶ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–µ, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–±–º–µ–Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π, USDT, THB.\n" 
                    "üíé –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º, —á—Ç–æ–±—ã –í—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫ –Ω–∞–º.\n"
                    "üí¨ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @...",
            reply_markup=get_main_keyboard()
        ) 
    except FileNotFoundError:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_path}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(F.text == "üí∞ –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
async def exchange_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω'.")
        await message.answer(
            "üí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_main: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data == "exchange_main")
async def exchange_main_back(callback_query: types.CallbackQuery):
    await safe_edit_text(
        callback_query.message,
        "üí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=inline_keyboards.get_exchange_main_keyboard()
    )
    await callback_query.answer()

@router.message(F.text == "üë©‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å")
async def get_profile_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–ü—Ä–æ—Ñ–∏–ª—å'.")
        await message.answer(
            f"üí¢–í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüí¢\n\nüí´–í–∞—à id: {message.from_user.id}\n üí´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤: üéàüéà \n",
            reply_markup=inline_keyboards.get_profile_main_user_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_profile_main: {str(e)}")
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ message")

@router.message(F.text == "‚ú® –û—Ç–∑—ã–≤—ã")
async def go_to_reviews(message: types.Message):
    await message.answer(
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º –æ–±–º–µ–Ω–Ω–∏–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: \n\n"
        "üëâ <a href='https://t.me/+w1iU4eQUG_oyYTIy'>–û—Ç–∑—ã–≤—ã | Xchanger</a>",
        parse_mode="HTML"
    )

# -------------------- –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–º–µ–Ω–∞ --------------------

## --- 1. –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---

@router.callback_query(F.data == "exchange_usdt_or_rub")
async def exchange_usdt(callback_query: types.CallbackQuery):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª –æ–±–º–µ–Ω USDT or RUB.")
        await safe_edit_text(
            callback_query.message,
            "üìåTHB\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
            reply_markup=inline_keyboards.get_usdt_rub_directions_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_usdt_or_rub: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "usdt_to_thb")
async def usdt_to_thb(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª USDT ‚Üí THB.")
        await state.update_data(exchange_type="USDT->THB")
        await safe_edit_text(
            callback_query.message,
            "<b>üí± –í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞ üí±</b>\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû",
            reply_markup=inline_keyboards.get_exchange_type_keyboard(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ usdt_to_thb: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")

@router.callback_query(F.data == "rub_to_thb")
async def rub_to_thb(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª RUB ‚Üí THB.")
        await state.update_data(exchange_type="RUB->THB")
        await safe_edit_text(
            callback_query.message,
            "<b>üéà–í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞üéà</b>\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b>\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "–ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû",
            reply_markup=inline_keyboards.get_exchange_type_keyboard_rub_to_thb(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ rub_to_thb: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")

## --- 2. USDT ‚Üí THB ---

@router.callback_query(F.data.in_(["exchange_in_ATM", "exchange_in_hotel"]))
async def show_atm_or_hotel(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "exchange_in_ATM":
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ"
    else:
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
    await state.update_data(receive_type=receive_type, input_type="input_usdt")
    text = (
        "üí± <b>–û–±–º–µ–Ω</b>\n\n"
        "üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
        f"üí® {receive_type}\n"
        f"üí± –ö—É—Ä—Å: <b>1 USDT = {USDT_TO_THB_RATE} THB</b>\n"
        "‚úî –°–µ—Ç—å: TRC20\n"
        "üí∞ –ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
        "üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
        "<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>"
    )
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=inline_keyboards.get_usdt_to_thb_keyboard(),
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(F.data.in_(["enter_thb_amount", "enter_usdt_amount"]))
async def switch_currency_usdt(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    receive_type = data.get("receive_type", "")
    exchange_type = data.get("exchange_type", "USDT->THB")
    if callback_query.data == "enter_thb_amount":
        await state.update_data(input_type="input_thb")
        text = (
            "üí± <b>–û–±–º–µ–Ω</b>\n\n"
            "üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: <b>1 USDT = {USDT_TO_THB_RATE} THB</b>\n"
            "‚úî –°–µ—Ç—å: TRC20\n"
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:</b>"
        )
        reply_markup = inline_keyboards.get_thb_to_usdt_keyboard()
    else:
        await state.update_data(input_type="input_usdt")
        text = (
            "üí± <b>–û–±–º–µ–Ω</b>\n\n"
            "üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: <b>1 USDT = {USDT_TO_THB_RATE} THB</b>\n"
            "‚úî –°–µ—Ç—å: TRC20\n"
            "–ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>"
        )
        reply_markup = inline_keyboards.get_usdt_to_thb_keyboard()
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    await callback_query.answer()

## --- 3. RUB ‚Üí THB ---

@router.callback_query(F.data.in_(["exchange_in_ATM_rub", "exchange_in_hotel_rub"]))
async def show_atm_or_hotel_rub(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "exchange_in_ATM_rub":
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ"
    else:
        receive_type = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
    await state.update_data(receive_type=receive_type, input_type="input_rub")
    text = (
        "üí± <b>–û–±–º–µ–Ω</b>\n\n"
        "üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
        f"üí® {receive_type}\n"
        f"üí± –ö—É—Ä—Å: <b>1 RUB = {1/RUB_TO_THB_RATE:.4f} THB</b>\n"
        "üí∞ –ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
        "üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
        "<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É RUB, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>"
    )
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=inline_keyboards.get_rub_to_thb_keyboard(),
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(F.data.in_(["enter_thb_amount_rub", "enter_rub_amount"]))
async def switch_currency_rub(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    receive_type = data.get("receive_type", "")
    exchange_type = data.get("exchange_type", "RUB->THB")
    if callback_query.data == "enter_thb_amount_rub":
        await state.update_data(input_type="input_thb")
        text = (
            "üí± <b>–û–±–º–µ–Ω</b>\n\n"
            "üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: <b>1 RUB = {1/RUB_TO_THB_RATE:.4f} THB</b>\n"
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:</b>"
        )
        reply_markup = inline_keyboards.get_thb_to_rub_keyboard()
    else:
        await state.update_data(input_type="input_rub")
        text = (
            "üí± <b>–û–±–º–µ–Ω</b>\n\n"
            "üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: <b>1 RUB = {1/RUB_TO_THB_RATE:.4f} THB</b>\n"
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞: 10000 THB (–±–∞—Ç—ã), –µ—Å–ª–∏ –Ω–∏–∂–µ - –∫–æ–º–∏—Å—Å–∏—è 300 THB (–±–∞—Ç—ã)\n"
            "üí∞ –ú–∞–∫—Å. —Å—É–º–º–∞: ‚àû\n\n"
            "<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É RUB, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:</b>"
        )
        reply_markup = inline_keyboards.get_rub_to_thb_keyboard()
    await safe_edit_text(
        callback_query.message,
        text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    await callback_query.answer()

# --- –í–≤–æ–¥ —Å—É–º–º—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---

@router.message(F.text.regexp(r'^\d+(\.\d+)?$'))
async def handle_amount_input(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        receive_type = data.get("receive_type", "")
        exchange_type = data.get("exchange_type", "USDT->THB")
        input_type = data.get("input_type", "input_usdt")
        commission_text = ""
        commission = 0
        in_currency = "USDT"
        out_currency = "THB"
        rate = USDT_TO_THB_RATE if exchange_type == "USDT->THB" else RUB_TO_THB_RATE
        amount_in = 0
        amount_out = 0

        if exchange_type == "USDT->THB":
            if input_type == "input_thb":
                amount_thb = amount
                amount_usdt = amount_thb / USDT_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 / USDT_TO_THB_RATE
                    amount_usdt += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} USDT)"
                amount_in = amount_usdt
                amount_out = amount_thb
            else:
                amount_usdt = amount
                amount_thb = amount_usdt * USDT_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 / USDT_TO_THB_RATE
                    amount_usdt += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} USDT)"
                amount_in = amount_usdt
                amount_out = amount_thb
        elif exchange_type == "RUB->THB":
            in_currency = "RUB"
            if input_type == "input_thb":
                amount_thb = amount
                amount_rub = amount_thb * RUB_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 * RUB_TO_THB_RATE
                    amount_rub += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} RUB)"
                amount_in = amount_rub
                amount_out = amount_thb
            else:
                amount_rub = amount
                amount_thb = amount_rub / RUB_TO_THB_RATE
                if amount_thb < 10000:
                    commission = 300 * RUB_TO_THB_RATE
                    amount_rub += commission
                    commission_text = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB ({commission:.2f} RUB)"
                amount_in = amount_rub
                amount_out = amount_thb

        await state.update_data(
            amount_in=amount_in,
            amount_out=amount_out,
            commission=commission,
            commission_text=commission_text,
            in_currency=in_currency,
            out_currency=out_currency,
            rate=rate
        )

        text = (
            f"üí± <b>–û–±–º–µ–Ω</b>\n\n"
            f"üíå –ó–∞—è–≤–∫–∞ ‚Ññ...\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: <b>1 {in_currency} = {rate} {out_currency}</b>\n"
            f"üí∏ –í—ã –æ—Ç–¥–∞—ë—Ç–µ: {amount_in:.2f} {in_currency}{commission_text}\n"
            f"üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: {amount_out:.2f} {out_currency}\n\n"
            f"‚ùï<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω:</b>"
        )
        await message.answer(
            text,
            reply_markup=inline_keyboards.get_confirm_exchange_keyboard(),
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.",
            reply_markup=inline_keyboards.get_usdt_to_thb_keyboard()
        )

@router.callback_query(F.data == "confirm_exchange")
async def confirm_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        exchange_type = data.get("exchange_type", "")
        in_currency = data.get("in_currency", "")
        
        if exchange_type == "USDT->THB":
            payment_details = (
                "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['amount_in']:.2f} USDT\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: {data['amount_out']:.2f} THB\n\n"
                "üìù <b>USDT (TRC20)</b>\n"
                "–ö–æ—à–µ–ª–µ–∫: <code>TMjRsz5SZ16adPMf11QQNZDHYkwQ58nSDd</code>\n"
                "–°–µ—Ç—å: TRC20\n\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞."
            )
        else:  # RUB->THB
            payment_details = (
                "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['amount_in']:.2f} RUB\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: {data['amount_out']:.2f} THB\n\n"
                "üìù <b>–†—É–±–ª–µ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                "–ù–æ–º–µ—Ä: <code>+79263691059</code>\n"
                "–ë–∞–Ω–∫–∏: –°–±–µ—Ä–±–∞–Ω–∫, –ê–ª—å—Ñ–∞, –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n"
                "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –í–∏—Ç–∞–ª–∏–π –í–æ–¥–æ–ª–∞–∑–æ–≤\n\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞."
            )
        
        await safe_edit_text(
            callback_query.message,
            payment_details,
            reply_markup=inline_keyboards.get_cancel_exchange_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state("waiting_for_payment_screenshot")
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–ª–∞—Ç—ã: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(F.photo, StateFilter("waiting_for_payment_screenshot"))
async def handle_payment_screenshot(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user = message.from_user
        tg_id = user.id
        username = user.username or "-"
        exchange_type = data.get("exchange_type", "")
        receive_type = data.get("receive_type", "")
        amount_in = data.get("amount_in")
        amount_out = data.get("amount_out")
        commission_text = data.get("commission_text", "")
        in_currency = data.get("in_currency", "")
        out_currency = data.get("out_currency", "")
        rate = data.get("rate", "")
        
        request_id = get_next_request_id()
        await state.update_data(request_id=request_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
        text = (
            f"üíå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}!\n\n"
            f"üí® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (tg_id: {tg_id})\n"
            f"üí± –¢–∏–ø –æ–±–º–µ–Ω–∞: {exchange_type}\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: 1 {in_currency} = {rate} {out_currency}\n"
            f"üí∏ –û—Ç–¥–∞–ª: {amount_in:.2f} {in_currency}{commission_text}\n"
            f"üí∞ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {amount_out:.2f} {out_currency}\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await message.bot.send_photo(6659909595, message.photo[-1].file_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.bot.send_message(6659909595, text, reply_markup=inline_keyboards.get_manager_action_keyboard(request_id))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Å –≤–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data.startswith("manager_confirm_"))
async def handle_manager_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        request_id = callback_query.data.split("_")[-1]
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = callback_query.message.text
        username = message_text.split("@")[1].split(" ")[0]
        user_id = int(message_text.split("tg_id: ")[1].split(")")[0])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await callback_query.message.edit_text(
            f"{callback_query.message.text}\n\n‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!"
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ" in message_text:
            await callback_query.bot.send_message(
                user_id,
                "üè® <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –≤ –æ—Ç–µ–ª–µ:</b>\n\n"
                "1. –ü—Ä–∏–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: <a href='https://maps.app.goo.gl/YUBKHTMEw29DJby18'>–û—Ç–µ–ª—å</a>\n"
                "2. –ü–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ —Ä–µ—Ü–µ–ø—à–µ–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞\n"
                "3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                parse_mode="HTML"
            )
        else:  # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            video_dir = "Video"
            for video_file in os.listdir(video_dir):
                if video_file.endswith(('.mp4', '.avi', '.mov')):
                    video_path = os.path.join(video_dir, video_file)
                    await callback_query.bot.send_video(
                        user_id,
                        FSInputFile(video_path)
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            for i in range(1, 3):
                image_path = f"pictures/{i}.jpg"
                if os.path.exists(image_path):
                    await callback_query.bot.send_photo(
                        user_id,
                        FSInputFile(image_path)
                    )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è
        await callback_query.bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=inline_keyboards.get_receipt_confirmation_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data.startswith("manager_reject_"))
async def handle_manager_reject(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = callback_query.message.text
        username = message_text.split("@")[1].split(" ")[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await callback_query.message.edit_text(
            f"{callback_query.message.text}\n\n‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        await callback_query.bot.send_message(
            6659909595,
            f"‚ö†Ô∏è –°–≤—è–∂–∏—Ç–µ—Å—å —Å @{username} –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "receipt_confirmed")
async def handle_receipt_confirmation(callback_query: types.CallbackQuery, state: FSMContext = None):
    try:
        get_next_request_id()
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—è–≤–∫–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ FSMContext
        message_text = callback_query.message.text
        request_id = message_text.split("#")[1].split("!")[0] if "#" in message_text else "N/A"
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSMContext
        data = None
        if state:
            try:
                data = await state.get_data()
            except Exception:
                data = None
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        exchange_data = {
            "request_id": request_id,
            "status": "completed",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        if data:
            exchange_data.update({
                "exchange_type": data.get("exchange_type", "-"),
                "receive_type": data.get("receive_type", "-"),
                "amount_in": data.get("amount_in", "-"),
                "in_currency": data.get("in_currency", "-"),
                "amount_out": data.get("amount_out", "-"),
                "out_currency": data.get("out_currency", "-"),
                "rate": data.get("rate", "-"),
            })
        add_exchange_to_history(callback_query.from_user.id, exchange_data)
        await callback_query.message.edit_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è! –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.",
            reply_markup=None
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "support_contact")
async def handle_support_contact(callback_query: types.CallbackQuery):
    try:
        await callback_query.message.edit_text(
            "üë®‚Äçüíº –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_username\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è:",
            reply_markup=inline_keyboards.get_receipt_confirmation_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "cancel_exchange")
async def cancel_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await safe_edit_text(
            callback_query.message,
            "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.\n\n üí®–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "confirm_exchange_rub")
async def confirm_exchange_rub(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        user = callback_query.from_user
        tg_id = user.id
        username = user.username or "-"
        exchange_type = data.get("exchange_type", "")
        receive_type = data.get("receive_type", "")
        amount_in = data.get("amount_in")
        amount_out = data.get("amount_out")
        commission_text = data.get("commission_text", "")
        in_currency = data.get("in_currency", "")
        out_currency = data.get("out_currency", "")
        rate = data.get("rate", "")
        text = (
            f"üíå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
            f"üí® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (tg_id: {tg_id})\n"
            f"üí± –¢–∏–ø –æ–±–º–µ–Ω–∞: {exchange_type}\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: 1 {in_currency} = {rate} {out_currency}\n"
            f"üí∏ –û—Ç–¥–∞—ë—Ç: {amount_in:.2f} {in_currency}{commission_text}\n"
            f"üí∞ –ü–æ–ª—É—á–∞–µ—Ç: {amount_out:.2f} {out_currency}\n"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await callback_query.bot.send_photo(6659909595, callback_query.photo[-1].file_id)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await callback_query.bot.send_message(6659909595, text)
        await safe_edit_text(
            callback_query.message,
            "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. \n\n –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Å –≤–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "cancel_exchange_rub")
async def cancel_exchange_rub(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await safe_edit_text(callback_query.message,
            "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.",
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å</b>\n\n"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.callback_query(F.data == "history_exchanges")
async def show_exchange_history(callback_query: types.CallbackQuery):
    try:
        history = load_exchange_history()
        user_id = str(callback_query.from_user.id)
        if user_id not in history or not history[user_id]:
            await callback_query.message.edit_text(
                "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤.",
                reply_markup=inline_keyboards.get_profile_main_user_keyboard()
            )
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–±–º–µ–Ω–æ–≤
        history_text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –æ–±–º–µ–Ω–æ–≤:</b>\n\n"
        for exchange in reversed(history[user_id][-10:]):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å
            in_cur = exchange.get('in_currency', '-')
            out_cur = exchange.get('out_currency', '-')
            rate = exchange.get('rate', '-')
            if in_cur != '-' and out_cur != '-' and rate != '-':
                rate_str = f"1 {in_cur} ‚Üí {rate} {out_cur}"
            else:
                rate_str = rate
            history_text += (
                f"<b>–ó–∞—è–≤–∫–∞ #{exchange.get('request_id', '-')}</b>\n"
                f"<b>–î–∞—Ç–∞:</b> {exchange.get('timestamp', '-')}\n"
                f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {exchange.get('exchange_type', '-')}\n"
                f"<b>–¢–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è:</b> {exchange.get('receive_type', '-')}\n"
                f"<b>–û—Ç–¥–∞–ª:</b> {exchange.get('amount_in', '-')} {in_cur}\n"
                f"<b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {exchange.get('amount_out', '-')} {out_cur}\n"
                f"<b>–ö—É—Ä—Å:</b> {rate_str}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞–≤–µ—Ä—à–µ–Ω\n\n"
            )
        await callback_query.message.edit_text(
            history_text,
            reply_markup=inline_keyboards.get_profile_main_user_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# -------------------- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ --------------------

async def safe_edit_text(message, *args, **kwargs):
    try:
        await message.edit_text(*args, **kwargs)
    except Exception as e:
        if "message is not modified" in str(e):
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text: {str(e)}")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    