#-------------------- –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã - -------------------
from aiogram import Router, types, F
import aiohttp
import html
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CoinGeckoClient –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src.services.coingecko_client (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å)
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ CoinGeckoClient –≤–µ—Ä–Ω—ã–π
from src.services.CoinGecko import CoinGeckoClient  # –ò–ó–ú–ï–ù–ï–ù–û: –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
from aiogram.filters import Command, StateFilter
from src.bot.keyboards.reply_keyboards import get_main_keyboard
import src.bot.keyboards.inline_keyboards as inline_keyboards
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –≤–∞—à–µ–≥–æ database.py
import src.database.database as db

from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from .colors_logs import *
from .colors_logs import get_user_display
import os
import logging

# –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫—É—Ä—Å–æ–≤, –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –≤ FSM
# USDT_TO_THB_RATE = 36.50
# RUB_TO_THB_RATE = 0.41

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ API –∏ —Å–µ—Å—Å–∏–∏
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ on_startup
aiohttp_session_global: aiohttp.ClientSession | None = None
coingecko_client_global: CoinGeckoClient | None = None

# --- ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥) ---
MANAGER_CHAT_ID = 6659909595  # –ü—Ä–∏–º–µ—Ä

router = Router()


# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ --------------------
async def update_and_store_rates_in_fsm(state: FSMContext, client: CoinGeckoClient | None = None) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —Å CoinGecko –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ FSM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    current_client = client if client else coingecko_client_global

    if not current_client:
        logging.error("CoinGeckoClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)!")
        await state.update_data(current_usdt_thb_rate=None, current_rub_thb_rate=None)
        return None

    try:
        rates = await current_client.get_rate()  # –û–∂–∏–¥–∞–µ–º {'USDT/THB': ..., 'RUB/THB': ...}
        if rates and isinstance(rates, dict) and 'USDT/THB' in rates and 'RUB/THB' in rates:
            usdt_thb_rate = rates.get('USDT/THB')
            rub_thb_rate = rates.get('RUB/THB')

            await state.update_data(
                current_usdt_thb_rate=usdt_thb_rate,
                current_rub_thb_rate=rub_thb_rate,
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è —Å–¥–µ–ª–∫–∏ (—Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ–≥–æ)
                # –≠—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            )
            logging.info(f"–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSM: USDT/THB={usdt_thb_rate}, RUB/THB={rub_thb_rate}")
            return {'USDT/THB': usdt_thb_rate, 'RUB/THB': rub_thb_rate}
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –æ—Ç CoinGecko. –û—Ç–≤–µ—Ç: {rates}")
            await state.update_data(current_usdt_thb_rate=None, current_rub_thb_rate=None)
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        await state.update_data(current_usdt_thb_rate=None, current_rub_thb_rate=None)
        return None


# -------------------- –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------------------
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        logging.info(f"User {get_user_display(message.from_user)} /start.")
        tg_id = message.from_user.id
        username = message.from_user.username
        await db.set_user(tg_id=tg_id, username=username)

        output_path = "pictures/XchangerBot_bright.png"
        photo = FSInputFile(output_path)
        await message.answer_photo(
            photo=photo,
            caption="üè¶ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–µ, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–±–º–µ–Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π, USDT, THB.\n"
                    "üíé –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º, —á—Ç–æ–±—ã –í—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫ –Ω–∞–º.\n"
                    "üí¨ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @–¢–ï–•_–ü–û–î–î–ï–†–ñ–ö–ê",  # –ó–ê–ú–ï–ù–ò–¢–¨
            reply_markup=get_main_keyboard()
        )
    except FileNotFoundError:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_path}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.message(F.text == "üí∞ –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
async def exchange_main(message: types.Message, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω'.")

        actual_rates = await update_and_store_rates_in_fsm(state)
        if not actual_rates:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return

        await message.answer(
            "üí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_main: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.callback_query(F.data == "exchange_main")
async def exchange_main_back(callback_query: types.CallbackQuery, state: FSMContext):  # –î–æ–±–∞–≤–∏–ª state
    # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–º–µ–Ω–∞, —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏–º –∫—É—Ä—Å—ã
    actual_rates = await update_and_store_rates_in_fsm(state)
    if not actual_rates:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    await safe_edit_text(
        callback_query.message,
        "üí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=inline_keyboards.get_exchange_main_keyboard()
    )
    await callback_query.answer()


@router.message(F.text == "üë©‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å")
async def get_profile_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–ü—Ä–æ—Ñ–∏–ª—å'.")
        tg_id = message.from_user.id

        user_history = await db.get_user_exchange_history(tg_id=tg_id, include_creation_status=False)
        successful_exchanges_count = sum(1 for item in user_history if item.status == db.Status.successful)

        await message.answer(
            f"üí¢–í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüí¢\n\n"
            f"üí´–í–∞—à id: {tg_id}\n"
            f"üí´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤: {successful_exchanges_count} üéàüéà\n",
            reply_markup=inline_keyboards.get_profile_main_user_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_profile_main: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.text == "‚ú® –û—Ç–∑—ã–≤—ã")
async def go_to_reviews(message: types.Message):
    await message.answer(
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º –æ–±–º–µ–Ω–Ω–∏–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: \n\n"
        "üëâ <a href='https://t.me/+w1iU4eQUG_oyYTIy'>–û—Ç–∑—ã–≤—ã | Xchanger</a>",  # –ó–ê–ú–ï–ù–ò–¢–¨
        parse_mode="HTML"
    )


# -------------------- –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–º–µ–Ω–∞ --------------------

@router.callback_query(F.data == "exchange_usdt_or_rub")
async def exchange_usdt_or_rub_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª –æ–±–º–µ–Ω USDT or RUB.")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        actual_rates = await update_and_store_rates_in_fsm(state)
        if not actual_rates:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        await safe_edit_text(
            callback_query.message,
            "üìåTHB\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
            reply_markup=inline_keyboards.get_usdt_rub_directions_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_usdt_or_rub_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "usdt_to_thb")
async def usdt_to_thb_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª USDT ‚Üí THB.")

        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º FSM data, –≥–¥–µ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—É—Ä—Å
        current_usdt_thb = data.get('current_usdt_thb_rate')

        if current_usdt_thb is None:  # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—É—Ä—Å–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
            updated_rates = await update_and_store_rates_in_fsm(state)
            if not updated_rates or updated_rates.get('USDT/THB') is None:
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USDT/THB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                            show_alert=True)
                return
            current_usdt_thb = updated_rates.get('USDT/THB')

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∫—É—Ä—Å –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±–º–µ–Ω–∞
        await state.update_data(
            currency_from="USDT",
            currency_to="THB",
            exchange_rate_str=str(current_usdt_thb),  # –≠—Ç–æ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç —Å–¥–µ–ª–∫–∞
            request_id=None
        )

        await safe_edit_text(
            callback_query.message,
            f"<b>üí± –í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞ (USDT ‚Üí THB)</b>\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: <b>1 USDT ‚âà {current_usdt_thb:.2f} THB</b>\n"
            f"(–∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ)\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)",
            reply_markup=inline_keyboards.get_exchange_type_keyboard(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ usdt_to_thb_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "rub_to_thb")
async def rub_to_thb_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª RUB ‚Üí THB.")

        data = await state.get_data()
        current_rub_thb = data.get('current_rub_thb_rate')

        if current_rub_thb is None:
            updated_rates = await update_and_store_rates_in_fsm(state)
            if not updated_rates or updated_rates.get('RUB/THB') is None:
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å RUB/THB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                            show_alert=True)
                return
            current_rub_thb = updated_rates.get('RUB/THB')

        await state.update_data(
            currency_from="RUB",
            currency_to="THB",
            exchange_rate_str=str(current_rub_thb),  # –§–∏–∫—Å–∏—Ä—É–µ–º –∫—É—Ä—Å –¥–ª—è —Å–¥–µ–ª–∫–∏
            request_id=None
        )

        await safe_edit_text(
            callback_query.message,
            f"<b>üéà–í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞ (RUB ‚Üí THB)üéà</b>\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: <b>1 RUB ‚âà {current_rub_thb:.4f} THB</b>\n"
            f"(–∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ)\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)",
            reply_markup=inline_keyboards.get_exchange_type_keyboard_rub_to_thb(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ rub_to_thb_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(
    F.data.in_(["exchange_in_ATM", "exchange_in_hotel", "exchange_in_ATM_rub", "exchange_in_hotel_rub"]))
async def select_receive_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        currency_from = data.get("currency_from")
        fixed_rate_for_deal_str = data.get("exchange_rate_str")

        if not currency_from or not fixed_rate_for_deal_str:
            # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
            return

        receive_type_val = ""
        input_currency_prompt_val = ""  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å python-–∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º input
        next_keyboard = None
        display_rate_text_for_deal = ""
        network_info_str = ""  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è

        fixed_rate_for_deal_float = float(fixed_rate_for_deal_str)

        if callback_query.data in ["exchange_in_ATM", "exchange_in_hotel"]:  # USDT -> THB
            receive_type_val = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ" if callback_query.data == "exchange_in_ATM" else "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
            input_currency_prompt_val = "USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
            await state.update_data(input_type="input_usdt")
            next_keyboard = inline_keyboards.get_usdt_to_thb_keyboard()
            display_rate_text_for_deal = f"1 USDT = {fixed_rate_for_deal_float:.2f} THB"
            network_info_str = "‚úî –°–µ—Ç—å: TRC20"

        elif callback_query.data in ["exchange_in_ATM_rub", "exchange_in_hotel_rub"]:  # RUB -> THB
            receive_type_val = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ" if callback_query.data == "exchange_in_ATM_rub" else "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
            input_currency_prompt_val = "RUB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
            await state.update_data(input_type="input_rub")
            next_keyboard = inline_keyboards.get_rub_to_thb_keyboard()
            display_rate_text_for_deal = f"1 RUB = {fixed_rate_for_deal_float:.4f} THB"
            # network_info_str –æ—Å—Ç–∞–µ—Ç—Å—è ""

        await state.update_data(receive_type=receive_type_val)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ—Å—Ç—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        safe_receive_type = html.escape(receive_type_val)
        safe_display_rate = html.escape(display_rate_text_for_deal)
        safe_network_info = html.escape(network_info_str)
        safe_input_prompt = html.escape(input_currency_prompt_val)

        text_parts = [
            "üí± <b>–û–±–º–µ–Ω</b>",
            f"üí® {safe_receive_type}",
            f"üí± –ö—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞: <b>{safe_display_rate}</b> (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω)",
        ]
        if safe_network_info:  # –î–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å
            text_parts.append(safe_network_info)

        text_parts.extend([
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–µ–∑ –¥–æ–ø. –∫–æ–º–∏—Å—Å–∏–∏: 10000 THB",
            "(–ï—Å–ª–∏ —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é &lt; 10000 THB, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB –∫ —Å—É–º–º–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ—Ç–¥–∞–µ—Ç–µ)",
            f"<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {safe_input_prompt}:</b>"
        ])

        text = "\n\n".join(text_parts)

        logging.debug(
            f"HTML text for select_receive_type_handler (Message ID: {callback_query.message.message_id}):\n{text}")

        await safe_edit_text(
            callback_query.message,
            text,
            reply_markup=next_keyboard,
            parse_mode="HTML"
        )
        await callback_query.answer()

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ select_receive_type_handler –¥–ª—è user {callback_query.from_user.id}:")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(
    F.data.in_(["enter_thb_amount", "enter_usdt_amount", "enter_thb_amount_rub", "enter_rub_amount"]))
async def switch_input_currency_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        receive_type = data.get("receive_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        currency_from = data.get("currency_from", "N/A")
        fixed_rate_for_deal_str = data.get("exchange_rate_str")

        if not fixed_rate_for_deal_str:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            await callback_query.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                        show_alert=True)
            return

        fixed_rate_for_deal_float = float(fixed_rate_for_deal_str)
        reply_markup_val = None
        prompt_currency = ""
        display_rate_text_for_deal = ""
        network_text = ""

        if currency_from == "USDT":
            display_rate_text_for_deal = f"1 USDT = {fixed_rate_for_deal_float:.2f} THB"
            if callback_query.data == "enter_thb_amount":
                await state.update_data(input_type="input_thb")
                prompt_currency = "THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å"
                reply_markup_val = inline_keyboards.get_thb_to_usdt_keyboard()
            else:  # enter_usdt_amount
                await state.update_data(input_type="input_usdt")
                prompt_currency = "USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
                reply_markup_val = inline_keyboards.get_usdt_to_thb_keyboard()
            network_text = "‚úî –°–µ—Ç—å: TRC20\n"

        elif currency_from == "RUB":
            display_rate_text_for_deal = f"1 RUB = {fixed_rate_for_deal_float:.4f} THB"
            if callback_query.data == "enter_thb_amount_rub":
                await state.update_data(input_type="input_thb")
                prompt_currency = "THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å"
                reply_markup_val = inline_keyboards.get_thb_to_rub_keyboard()
            else:  # enter_rub_amount
                await state.update_data(input_type="input_rub")
                prompt_currency = "RUB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
                reply_markup_val = inline_keyboards.get_rub_to_thb_keyboard()
            # network_text = "" # –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

        text = (
            "üí± <b>–û–±–º–µ–Ω</b>\n\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞: <b>{display_rate_text_for_deal}</b> (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω)\n"
            f"{network_text}"
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–µ–∑ –¥–æ–ø. –∫–æ–º–∏—Å—Å–∏–∏: 10000 THB\n"
            "(–ï—Å–ª–∏ —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é &lt; 10000 THB, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB –∫ —Å—É–º–º–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ—Ç–¥–∞–µ—Ç–µ)\n\n"
            f"<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {prompt_currency}:</b>"
        )

        await safe_edit_text(
            callback_query.message,
            text,
            reply_markup=reply_markup_val,
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ switch_input_currency_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(StateFilter(None), F.text.regexp(r'^\d+([\.,]\d+)?$'))
async def handle_amount_input(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        currency_from = data.get("currency_from")
        if not currency_from:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É–º–º–∞ '{message.text}' –æ—Ç {get_user_display(message.from_user)} –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSM.")
            return

        fixed_rate_for_calculation_str = data.get("exchange_rate_str")
        if not fixed_rate_for_calculation_str:
            logging.error(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: exchange_rate_str –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM –¥–ª—è {message.from_user.id} –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã.")
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤–∞—Ä–∏–π–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –¥—Ä—É–≥–æ–π –∫—É—Ä—Å.
            # –õ—É—á—à–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω –∑–∞–Ω–æ–≤–æ.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return

        current_rate_for_calc = float(fixed_rate_for_calculation_str)

        amount_str = message.text.replace(',', '.')
        amount_entered = float(amount_str)
        user_tg_id = message.from_user.id

        receive_type = data.get("receive_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        currency_to = data.get("currency_to")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å "THB"
        input_type = data.get("input_type")

        amount_to_give = 0.0
        amount_to_get = 0.0
        final_commission_text = ""
        MIN_THB_FOR_NO_COMMISSION = 10000.0
        COMMISSION_THB_AMOUNT = 300.0
        display_rate_text_for_deal = ""  # –ö—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏–¥–µ—Ç —Å–¥–µ–ª–∫–∞

        if currency_from == "USDT":
            display_rate_text_for_deal = f"1 USDT = {current_rate_for_calc:.2f} THB"
            if input_type == "input_thb":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª THB (—Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å)
                amount_to_get = amount_entered
                amount_to_give = amount_to_get / current_rate_for_calc
                if amount_to_get < MIN_THB_FOR_NO_COMMISSION and amount_to_get > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ 0
                    commission_in_usdt = COMMISSION_THB_AMOUNT / current_rate_for_calc
                    amount_to_give += commission_in_usdt
                    final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_usdt:.2f} USDT)"
            else:  # input_usdt. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª USDT (—Å–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—Ç –æ—Ç–¥–∞—Ç—å)
                amount_to_give_initial = amount_entered
                amount_to_get_calculated = amount_to_give_initial * current_rate_for_calc
                amount_to_give = amount_to_give_initial
                amount_to_get = amount_to_get_calculated  # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
                if amount_to_get_calculated < MIN_THB_FOR_NO_COMMISSION and amount_to_get_calculated > 0:
                    commission_in_usdt = COMMISSION_THB_AMOUNT / current_rate_for_calc
                    amount_to_give += commission_in_usdt  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–¥–∞–µ—Ç –±–æ–ª—å—à–µ
                    # amount_to_get –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, —á—Ç–æ –±—ã–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –æ—Ç amount_to_give_initial,
                    # —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∏—Å—Å–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å—É–º–º–µ "–æ—Ç–¥–∞—é"
                    final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_usdt:.2f} USDT)"

        elif currency_from == "RUB":
            display_rate_text_for_deal = f"1 RUB = {current_rate_for_calc:.4f} THB"
            if input_type == "input_thb":
                amount_to_get = amount_entered
                amount_to_give = amount_to_get / current_rate_for_calc
                if amount_to_get < MIN_THB_FOR_NO_COMMISSION and amount_to_get > 0:
                    commission_in_rub = COMMISSION_THB_AMOUNT / current_rate_for_calc
                    amount_to_give += commission_in_rub
                    final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_rub:.2f} RUB)"
            else:  # input_rub
                amount_to_give_initial = amount_entered
                amount_to_get_calculated = amount_to_give_initial * current_rate_for_calc
                amount_to_give = amount_to_give_initial
                amount_to_get = amount_to_get_calculated
                if amount_to_get_calculated < MIN_THB_FOR_NO_COMMISSION and amount_to_get_calculated > 0:
                    commission_in_rub = COMMISSION_THB_AMOUNT / current_rate_for_calc
                    amount_to_give += commission_in_rub
                    final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_rub:.2f} RUB)"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –º–µ–Ω—å—à–µ 1 THB)
        if amount_to_get <= 0 or amount_to_give <= 0:
            await message.answer("–°—É–º–º–∞ –æ–±–º–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É.")
            return

        new_request_in_db = await db.create_exchange_request(
            tg_id=user_tg_id,
            currency_from=currency_from,
            currency_to=currency_to,
            give=round(amount_to_give, 8 if currency_from == "USDT" else 2),  # –¢–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–¥–∞–≤–∞–µ–º–æ–π –≤–∞–ª—é—Ç—ã
            rate=fixed_rate_for_calculation_str,
            get=round(amount_to_get, 2),
        )

        if not new_request_in_db:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return

        request_id = new_request_in_db.id

        await state.update_data(
            request_id=request_id,
            final_amount_to_give=amount_to_give,
            final_amount_to_get=amount_to_get,
            final_commission_text=final_commission_text
        )

        text_to_confirm = (
            f"üí± <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞</b>\n\n"
            f"üíå –ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n"
            f"üí® {receive_type}\n"
            f"üí± –ö—É—Ä—Å: <b>{display_rate_text_for_deal}</b> (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏)\n"
            f"üí∏ –í—ã –æ—Ç–¥–∞—ë—Ç–µ: <b>{amount_to_give:.2f} {currency_from}</b>{final_commission_text}\n"
            f"üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: <b>{amount_to_get:.2f} {currency_to}</b>\n\n"
            f"‚ùï<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:</b>"
        )
        await message.answer(
            text_to_confirm,
            reply_markup=inline_keyboards.get_confirm_exchange_keyboard(),
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_amount_input:")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (confirm_exchange_handler, handle_payment_screenshot –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–∞–∫–∏–º–∏ –∂–µ,
# —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å request_id –∏–∑ FSM, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ---

# ... (–ø—Ä–æ–ø—É—Å—Ç–∏–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π handle_payment_screenshot, manager_confirm, manager_reject, receipt_confirmation, support_contact, cancel_exchange, history, safe_edit, back_to_profile)
# –í–∞–∂–Ω–æ: –≤ cancel_exchange_handler –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π.

# –ö–æ–¥ –¥–ª—è `confirm_exchange_handler` (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –æ–Ω —É–∂–µ –±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM)
@router.callback_query(F.data == "confirm_exchange")
async def confirm_exchange_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data.get("request_id")
        currency_from = data.get("currency_from")
        amount_to_give = data.get("final_amount_to_give")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã
        amount_to_get = data.get("final_amount_to_get")

        if not all([request_id, currency_from, amount_to_give is not None, amount_to_get is not None]):
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                        show_alert=True)
            current_message_id = callback_query.message.message_id
            try:
                await safe_edit_text(callback_query.message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω –∑–∞–Ω–æ–≤–æ.",
                                     reply_markup=inline_keyboards.get_exchange_main_keyboard())
            except Exception:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                if callback_query.message.message_id == current_message_id:  # –ß—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω –∑–∞–Ω–æ–≤–æ.",
                                                        reply_markup=inline_keyboards.get_exchange_main_keyboard())
            await state.clear()
            return

        await db.update_exchange_request_data(request_id=request_id, status=db.Status.pending_payment)

        payment_details_text = ""
        if currency_from == "USDT":
            payment_details_text = (
                "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount_to_give:.2f} USDT</b>\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: <b>{amount_to_get:.2f} THB</b>\n\n"
                "üìù <b>USDT (TRC20)</b>\n"
                "–ö–æ—à–µ–ª–µ–∫: <code>TMjRsz5SZ16adPMf11QQNZDHYkwQ58nSDd</code>\n"
                "–°–µ—Ç—å: TRC20\n\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )
        elif currency_from == "RUB":
            payment_details_text = (
                "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount_to_give:.2f} RUB</b>\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: <b>{amount_to_get:.2f} THB</b>\n\n"
                "üìù <b>–†—É–±–ª–µ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                "–ù–æ–º–µ—Ä: <code>+79263691059</code>\n"
                "–ë–∞–Ω–∫–∏: –°–±–µ—Ä–±–∞–Ω–∫, –ê–ª—å—Ñ–∞, –¢–∏–Ω—å–∫–æ—Ñ—Ñ\n"
                "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –í–∏—Ç–∞–ª–∏–π –í–æ–¥–æ–ª–∞–∑–æ–≤\n\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )

        await safe_edit_text(
            callback_query.message,
            payment_details_text,
            reply_markup=inline_keyboards.get_cancel_exchange_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state("waiting_for_payment_screenshot")
        await callback_query.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_exchange_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "history_exchanges")
async def show_exchange_history_handler(callback_query: types.CallbackQuery):
    try:
        user_tg_id = callback_query.from_user.id
        user_role = await db.get_user_role(tg_id=user_tg_id)

        history_text_header = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤:</b>\n\n"
        history_text_body = ""  # –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏
        exchanges_to_display = []
        reply_markup_history = None

        if user_role == db.Role.client:
            user_history = await db.get_user_exchange_history(
                tg_id=user_tg_id,
                include_creation_status=True
            )
            exchanges_to_display = user_history[:10]
            if not exchanges_to_display:
                history_text_body = "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤."
            reply_markup_history = inline_keyboards.get_profile_main_user_keyboard()

        elif user_role in [db.Role.admin, db.Role.manager]:
            all_history = await db.get_last_20_all_users_exchange_history()
            exchanges_to_display = all_history
            if not exchanges_to_display:
                history_text_body = "üìú –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–º–µ–Ω–æ–≤."
            # reply_markup_history –æ—Å—Ç–∞–µ—Ç—Å—è None –¥–ª—è –∞–¥–º–∏–Ω–∞/–º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–≤–æ—é)

        else:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.", show_alert=True)
            return

        if exchanges_to_display:
            for item in exchanges_to_display:
                user_info_for_admin = ""
                if user_role in [db.Role.admin, db.Role.manager] and hasattr(item, 'user') and item.user:
                    safe_username = html.escape(str(item.user.username or 'N/A'))
                    user_info_for_admin = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item.user.tg_id} (@{safe_username})\n"

                safe_currency_from = html.escape(str(item.currency_from))
                safe_currency_to = html.escape(str(item.currency_to))
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º item.rate –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                rate_value_str = str(item.rate)
                safe_rate_display_str = html.escape(rate_value_str)
                safe_status_value = html.escape(str(item.status.value))  # item.status —ç—Ç–æ Enum, .value —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

                rate_line = f"–ö—É—Ä—Å: 1 {safe_currency_from} = {safe_rate_display_str} {safe_currency_to}" \
                    if item.rate and rate_value_str.lower() != "n/a" else "–ö—É—Ä—Å: –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏"

                history_text_body += (
                    f"<b>–ó–∞—è–≤–∫–∞ #{item.id}</b>\n"
                    f"{user_info_for_admin}"
                    f"üóì –î–∞—Ç–∞: {item.date.strftime('%Y-%m-%d %H:%M')}\n"
                    f" –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {safe_currency_from} ‚Üí {safe_currency_to}\n"
                    f"üí∏ –û—Ç–¥–∞–ª: {item.give:.2f} {safe_currency_from}\n"
                    f"üí∞ –ü–æ–ª—É—á–∏–ª: {item.get:.2f} {safe_currency_to}\n"
                    f"{rate_line}\n"
                    f" –°—Ç–∞—Ç—É—Å: {safe_status_value}\n\n"
                )

        final_history_text = history_text_header + history_text_body if history_text_body else history_text_header + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        if not exchanges_to_display and user_role == db.Role.client:  # –ï—Å–ª–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏
            final_history_text = "üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤."
        elif not exchanges_to_display and user_role in [db.Role.admin, db.Role.manager]:  # –ï—Å–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏
            final_history_text = "üìú –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–º–µ–Ω–æ–≤."

        await safe_edit_text(
            callback_query.message,
            final_history_text.strip(),  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            reply_markup=reply_markup_history,
            parse_mode="HTML"
        )
        await callback_query.answer()

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤:")  # logging.exception –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def safe_edit_text(message, *args, **kwargs):
    try:
        await message.edit_text(*args, **kwargs)
    except Exception as e:
        if "message is not modified" in str(e):
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text: {str(e)}")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ