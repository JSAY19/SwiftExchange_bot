from aiogram import Router, types, F
from aiogram.filters import Command
from src.bot.keyboards.reply_keyboards import get_main_keyboard
from src.bot.keyboards.inline_keyboards import get_exchange_main_keyboard, get_usdt_directions_keyboard, get_exchange_type_keyboard
from datetime import datetime, timedelta
import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
import logging
from .colors_logs import *
from .colors_logs import get_user_display

router = Router()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        logging.info(f"User {get_user_display(message.from_user)} /start.")
        # –Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        output_path = "pictures/XchangerBot_bright.png"
        photo = FSInputFile(output_path)
        await message.answer_photo(
            photo=photo,
            caption="üè¶ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–µ, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–±–º–µ–Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π, USDT, THB.\n" 
                    "üíé –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º, —á—Ç–æ–±—ã –í—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫ –Ω–∞–º.\n"
                    "üí¨ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @...",
            reply_markup=get_main_keyboard()
        ) 
    except FileNotFoundError:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_path}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.message(F.text == "üí∞ –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
async def exchange_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω'.")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_main: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.callback_query(F.data == "exchange_main")
async def exchange_main_back(callback_query: types.CallbackQuery):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=get_exchange_main_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_main_back: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")


@router.callback_query(F.data == "exchange_usdt")
async def exchange_usdt(callback_query: types.CallbackQuery):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª –æ–±–º–µ–Ω USDT.")
        await callback_query.message.edit_text(
            "THB\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
            reply_markup=get_usdt_directions_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_usdt: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")

@router.callback_query(F.data == "usdt_to_thb")
async def usdt_to_thb(callback_query: types.CallbackQuery):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª USDT ‚Üí THB.")
        await callback_query.message.edit_text(
            "<b>–í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞</b>\n\n"
            "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b>, –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞\n"
            "–º–∏–Ω. —Å—É–º–º–∞: üéâ‚ú®‚ú®\n"
            "–º–∞–∫—Å. —Å—É–º–º–∞: üéâ‚ú®‚ú®\n\n"
            "üè¢ <b>–û—Ñ–ª–∞–π–Ω</b>, –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞\n"
            "–º–∏–Ω. —Å—É–º–º–∞: üéâ‚ú®‚ú®\n"
            "–º–∞–∫—Å. —Å—É–º–º–∞: üéâ‚ú®‚ú®",
            reply_markup=get_exchange_type_keyboard(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ usdt_to_thb: {str(e)}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ callback_query")