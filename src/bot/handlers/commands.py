# -------------------- –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã --------------------
from aiogram import Router, types, F
import aiohttp
import html  # –î–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç html –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CoinGeckoClient –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ src.services.coingecko_client (–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å)
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ CoinGeckoClient –≤–µ—Ä–Ω—ã–π
from src.services.CoinGecko import CoinGeckoClient
from aiogram.filters import Command, StateFilter
from src.bot.keyboards.reply_keyboards import get_main_keyboard
import src.bot.keyboards.inline_keyboards as inline_keyboards
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –≤–∞—à–µ–≥–æ database.py
import src.database.database as db

from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from .colors_logs import *
from .colors_logs import get_user_display
import os
import logging

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ API –∏ —Å–µ—Å—Å–∏–∏
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤ on_startup (—Å–º. –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º)
aiohttp_session_global: aiohttp.ClientSession | None = None
coingecko_client_global: CoinGeckoClient | None = None

EXCHANGER_FEE_PERCENTAGE = 0.03 # 3%

MIN_COMMISSION_THB = 300.0
MIN_THB_FOR_NO_COMMISSION = 10000.0

# --- ID –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥) ---
MANAGER_CHAT_ID = 6659909595  # –ü—Ä–∏–º–µ—Ä

router = Router()


# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ --------------------
async def update_and_store_rates_in_fsm(state: FSMContext, client: CoinGeckoClient | None = None) -> dict | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã —Å CoinGecko –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ FSM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–∞–º–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    current_client = client if client else coingecko_client_global

    if not current_client:
        logging.error("CoinGeckoClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π)!")
        await state.update_data(current_usdt_thb_rate=None, current_rub_thb_rate=None)
        return None

    try:
        rates = await current_client.get_rate()
        if rates and isinstance(rates, dict) and 'USDT/THB' in rates and 'RUB/THB' in rates:
            usdt_thb_rate = rates.get('USDT/THB') * (1 - 0.1)
            rub_thb_rate = rates.get('RUB/THB')

            await state.update_data(
                current_usdt_thb_rate=usdt_thb_rate,
                current_rub_thb_rate=rub_thb_rate,
            )
            logging.info(f"–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ FSM: USDT/THB={usdt_thb_rate}, RUB/THB={rub_thb_rate}")
            return {'USDT/THB': usdt_thb_rate, 'RUB/THB': rub_thb_rate}
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –æ—Ç CoinGecko. –û—Ç–≤–µ—Ç: {rates}")
            await state.update_data(current_usdt_thb_rate=None, current_rub_thb_rate=None)
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        await state.update_data(current_usdt_thb_rate=None, current_rub_thb_rate=None)
        return None


# -------------------- –ì–ª–∞–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã --------------------
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        logging.info(f"User {get_user_display(message.from_user)} /start.")
        tg_id = message.from_user.id
        username = message.from_user.username
        await db.set_user(tg_id=tg_id, username=username)

        output_path = "pictures/XchangerBot_bright.png"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        photo = FSInputFile(output_path)
        await message.answer_photo(
            photo=photo,
            caption="üè¶ –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–¥—ë–∂–Ω—ã–µ, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –æ–±–º–µ–Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —Ä—É–±–ª–µ–π, USDT, THB.\n"
                    "üíé –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1 ‚Äî –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –ú—ã –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º, —á—Ç–æ–±—ã –í—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∏—Å—å –∫ –Ω–∞–º.\n"
                    "üí¨ ‚Üí –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @–í–ê–®_–°–ê–ü–ü–û–†–¢_–Æ–ó–ï–†–ù–ï–ô–ú",  # –ó–ê–ú–ï–ù–ò–¢–¨
            reply_markup=get_main_keyboard()
        )
    except FileNotFoundError:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {output_path}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–º–∞–Ω–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.message(F.text == "üí∞ –°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω")
async def exchange_main(message: types.Message, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–°–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω'.")

        actual_rates = await update_and_store_rates_in_fsm(state)
        if not actual_rates:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
            return

        await message.answer(
            "üí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=inline_keyboards.get_exchange_main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_main: {str(e)}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.callback_query(F.data == "exchange_main")
async def exchange_main_back(callback_query: types.CallbackQuery, state: FSMContext):
    actual_rates = await update_and_store_rates_in_fsm(state)
    if not actual_rates:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return

    await safe_edit_text(
        callback_query.message,
        "üí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
        reply_markup=inline_keyboards.get_exchange_main_keyboard()
    )
    await callback_query.answer()


@router.message(F.text == "üë©‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å")
async def get_profile_main(message: types.Message):
    try:
        logging.info(f"User '{get_user_display(message.from_user)}' –≤—ã–±—Ä–∞–ª '–ü—Ä–æ—Ñ–∏–ª—å'.")
        tg_id = message.from_user.id

        user_history = await db.get_user_exchange_history(tg_id=tg_id, include_creation_status=False)
        successful_exchanges_count = sum(1 for item in user_history if item.status == db.Status.successful)

        await message.answer(
            f"üí¢–í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüí¢\n\n"
            f"üí´–í–∞—à id: {tg_id}\n"
            f"üí´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤: {successful_exchanges_count} üéàüéà\n",
            reply_markup=inline_keyboards.get_profile_main_user_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_profile_main: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.text == "‚ú® –û—Ç–∑—ã–≤—ã")
async def go_to_reviews(message: types.Message):
    await message.answer(
        "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã –æ –Ω–∞—à–µ–º –æ–±–º–µ–Ω–Ω–∏–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ: \n\n"
        "üëâ <a href='https://t.me/+w1iU4eQUG_oyYTIy'>–û—Ç–∑—ã–≤—ã | Xchanger</a>",  # –ó–ê–ú–ï–ù–ò–¢–¨
        parse_mode="HTML"
    )


# -------------------- –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–º–µ–Ω–∞ --------------------

@router.callback_query(F.data == "exchange_usdt_or_rub")
async def exchange_usdt_or_rub_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª –æ–±–º–µ–Ω USDT or RUB.")
        actual_rates = await update_and_store_rates_in_fsm(state)
        if not actual_rates:
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

        await safe_edit_text(
            callback_query.message,
            "üìåTHB\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:",
            reply_markup=inline_keyboards.get_usdt_rub_directions_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ exchange_usdt_or_rub_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "usdt_to_thb")
async def usdt_to_thb_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª USDT ‚Üí THB.")

        data = await state.get_data()
        current_usdt_thb = data.get('current_usdt_thb_rate')

        if current_usdt_thb is None:
            updated_rates = await update_and_store_rates_in_fsm(state)
            if not updated_rates or updated_rates.get('USDT/THB') is None:
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USDT/THB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                            show_alert=True)
                return
            current_usdt_thb = updated_rates.get('USDT/THB')

        await state.update_data(
            currency_from="USDT",
            currency_to="THB",
            exchange_rate_str=str(current_usdt_thb),
            request_id=None
        )

        await safe_edit_text(
            callback_query.message,
            "<b>üí± –í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞ (USDT ‚Üí THB)</b>\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: <b>1 USDT ‚âà {current_usdt_thb:.2f} THB</b>\n"
            "(–∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ)\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)",
            reply_markup=inline_keyboards.get_exchange_type_keyboard(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ usdt_to_thb_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "rub_to_thb")
async def rub_to_thb_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        logging.info(f"User '{get_user_display(callback_query.from_user)}' –≤—ã–±—Ä–∞–ª RUB ‚Üí THB.")

        data = await state.get_data()
        current_rub_thb = data.get('current_rub_thb_rate')

        if current_rub_thb is None:
            updated_rates = await update_and_store_rates_in_fsm(state)
            if not updated_rates or updated_rates.get('RUB/THB') is None:
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å RUB/THB. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                            show_alert=True)
                return
            current_rub_thb = updated_rates.get('RUB/THB')

        await state.update_data(
            currency_from="RUB",
            currency_to="THB",
            exchange_rate_str=str(current_rub_thb),
            request_id=None
        )

        await safe_edit_text(
            callback_query.message,
            "<b>üéà–í—ã–±–æ—Ä –æ–±–º–µ–Ω–∞ (RUB ‚Üí THB)üéà</b>\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: <b>1 RUB ‚âà {current_rub_thb:.4f} THB</b>\n"
            "(–∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ)\n\n"
            "<b>‚öô –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–º–µ–Ω–∞:</b>\n"
            "üåê <b>–í –±–∞–Ω–∫–æ–º–∞—Ç–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)\n"
            "üè¢ <b>–í –æ—Ç–µ–ª–µ</b> (–ú–∏–Ω: 10000 THB, –∏–Ω–∞—á–µ –∫–æ–º. 300 THB)",
            reply_markup=inline_keyboards.get_exchange_type_keyboard_rub_to_thb(),
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ rub_to_thb_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(
    F.data.in_(["exchange_in_ATM", "exchange_in_hotel", "exchange_in_ATM_rub", "exchange_in_hotel_rub"]))
async def select_receive_type_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        currency_from = data.get("currency_from")
        fixed_rate_for_deal_str = data.get("exchange_rate_str")

        if not currency_from or not fixed_rate_for_deal_str:
            # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
            return

        receive_type_val = ""
        input_currency_prompt_val = ""  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å python-–∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º input
        next_keyboard = None
        display_rate_text_for_deal = ""
        network_info_str = ""  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è

        fixed_rate_for_deal_float = float(fixed_rate_for_deal_str)

        if callback_query.data in ["exchange_in_ATM", "exchange_in_hotel"]:  # USDT -> THB
            receive_type_val = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ" if callback_query.data == "exchange_in_ATM" else "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
            input_currency_prompt_val = "USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
            await state.update_data(input_type="input_usdt")
            next_keyboard = inline_keyboards.get_usdt_to_thb_keyboard()
            display_rate_text_for_deal = f"1 USDT = {fixed_rate_for_deal_float:.2f} THB"
            network_info_str = "‚úî –°–µ—Ç—å: TRC20"

        elif callback_query.data in ["exchange_in_ATM_rub", "exchange_in_hotel_rub"]:  # RUB -> THB
            receive_type_val = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ" if callback_query.data == "exchange_in_ATM_rub" else "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
            input_currency_prompt_val = "RUB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
            await state.update_data(input_type="input_rub")
            next_keyboard = inline_keyboards.get_rub_to_thb_keyboard()
            display_rate_text_for_deal = f"1 RUB = {fixed_rate_for_deal_float:.4f} THB"
            # network_info_str –æ—Å—Ç–∞–µ—Ç—Å—è ""

        await state.update_data(receive_type=receive_type_val)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ—Å—Ç—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        safe_receive_type = html.escape(receive_type_val)
        safe_display_rate = html.escape(display_rate_text_for_deal)
        safe_network_info = html.escape(network_info_str)
        safe_input_prompt = html.escape(input_currency_prompt_val)

        text_parts = [
            "üí± <b>–û–±–º–µ–Ω</b>",
            f"üí® {safe_receive_type}",
            f"üí± –ö—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞: <b>{safe_display_rate}</b> (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω)",
        ]
        if safe_network_info:  # –î–æ–±–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å
            text_parts.append(safe_network_info)

        text_parts.extend([
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–µ–∑ –¥–æ–ø. –∫–æ–º–∏—Å—Å–∏–∏: 10000 THB",
            "(–ï—Å–ª–∏ —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é &lt; 10000 THB, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB –∫ —Å—É–º–º–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ—Ç–¥–∞–µ—Ç–µ)",
            f"<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {safe_input_prompt}:</b>"
        ])

        text = "\n\n".join(text_parts)

        logging.debug(
            f"HTML text for select_receive_type_handler (Message ID: {callback_query.message.message_id}):\n{text}")

        await safe_edit_text(
            callback_query.message,
            text,
            reply_markup=next_keyboard,
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ select_receive_type_handler –¥–ª—è user {callback_query.from_user.id}:")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(
    F.data.in_(["enter_thb_amount", "enter_usdt_amount", "enter_thb_amount_rub", "enter_rub_amount"]))
async def switch_input_currency_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        receive_type = data.get("receive_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        currency_from = data.get("currency_from", "N/A")
        fixed_rate_for_deal_str = data.get("exchange_rate_str")

        if not fixed_rate_for_deal_str:
            await callback_query.answer("–û—à–∏–±–∫–∞: –∫—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                                        show_alert=True)
            return

        fixed_rate_for_deal_float = float(fixed_rate_for_deal_str)
        reply_markup_val = None
        prompt_currency = ""
        display_rate_text_for_deal = ""
        network_text_val = ""  # –ò–∑–º–µ–Ω–∏–ª –∏–º—è

        if currency_from == "USDT":
            display_rate_text_for_deal = f"1 USDT = {fixed_rate_for_deal_float:.2f} THB"
            if callback_query.data == "enter_thb_amount":
                await state.update_data(input_type="input_thb")
                prompt_currency = "THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å"
                reply_markup_val = inline_keyboards.get_thb_to_usdt_keyboard()
            else:
                await state.update_data(input_type="input_usdt")
                prompt_currency = "USDT, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
                reply_markup_val = inline_keyboards.get_usdt_to_thb_keyboard()
            network_text_val = "‚úî –°–µ—Ç—å: TRC20"

        elif currency_from == "RUB":
            display_rate_text_for_deal = f"1 RUB = {fixed_rate_for_deal_float:.4f} THB"
            if callback_query.data == "enter_thb_amount_rub":
                await state.update_data(input_type="input_thb")
                prompt_currency = "THB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å"
                reply_markup_val = inline_keyboards.get_thb_to_rub_keyboard()
            else:
                await state.update_data(input_type="input_rub")
                prompt_currency = "RUB, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å"
                reply_markup_val = inline_keyboards.get_rub_to_thb_keyboard()

        safe_receive_type = html.escape(receive_type)
        safe_display_rate = html.escape(display_rate_text_for_deal)
        safe_network_text = html.escape(network_text_val)
        safe_prompt_currency = html.escape(prompt_currency)

        text_parts = [
            "üí± <b>–û–±–º–µ–Ω</b>",
            f"üí® {safe_receive_type}",
            f"üí± –ö—É—Ä—Å –¥–ª—è –æ–±–º–µ–Ω–∞: <b>{safe_display_rate}</b> (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω)",
        ]
        if safe_network_text:
            text_parts.append(safe_network_text)
        text_parts.extend([
            "üí∞ –ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –±–µ–∑ –¥–æ–ø. –∫–æ–º–∏—Å—Å–∏–∏: 10000 THB",
            "(–ï—Å–ª–∏ —Å—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é &lt; 10000 THB, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è 300 THB –∫ —Å—É–º–º–µ, –∫–æ—Ç–æ—Ä—É—é –≤—ã –æ—Ç–¥–∞–µ—Ç–µ)",
            f"<b>‚ùï –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {safe_prompt_currency}:</b>"
        ])
        text = "\n\n".join(text_parts)

        await safe_edit_text(
            callback_query.message,
            text,
            reply_markup=reply_markup_val,
            parse_mode="HTML"
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ switch_input_currency_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# @router.message(StateFilter(None), F.text.regexp(r'^\d+([\.,]\d+)?$'))
# async def handle_amount_input(message: types.Message, state: FSMContext):
#     try:
#         data = await state.get_data()
#         currency_from = data.get("currency_from")
#         if not currency_from:
#             logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É–º–º–∞ '{message.text}' –æ—Ç {get_user_display(message.from_user)} –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSM.")
#             return
#
#         fixed_rate_for_calculation_str = data.get("exchange_rate_str")
#         if not fixed_rate_for_calculation_str:
#             logging.error(
#                 f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: exchange_rate_str –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM –¥–ª—è {message.from_user.id} –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã.")
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω –∑–∞–Ω–æ–≤–æ.",
#                                  reply_markup=get_main_keyboard())
#             await state.clear()
#             return
#
#         current_rate_for_calc = float(fixed_rate_for_calculation_str)
#
#         amount_str = message.text.replace(',', '.')
#         amount_entered = float(amount_str)
#         user_tg_id = message.from_user.id
#
#         receive_type = data.get("receive_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
#         currency_to = data.get("currency_to")
#         input_type = data.get("input_type")
#
#         amount_to_give = 0.0
#         amount_to_get = 0.0
#         final_commission_text = ""
#         MIN_THB_FOR_NO_COMMISSION = 10000.0
#         COMMISSION_THB_AMOUNT = 300.0
#         display_rate_text_for_deal = ""
#
#         if currency_from == "USDT":
#             display_rate_text_for_deal = f"1 USDT = {current_rate_for_calc:.2f} THB"
#             if input_type == "input_thb":
#                 amount_to_get = amount_entered
#                 amount_to_give = amount_to_get / current_rate_for_calc
#                 if amount_to_get < MIN_THB_FOR_NO_COMMISSION and amount_to_get > 0:
#                     commission_in_usdt = COMMISSION_THB_AMOUNT / current_rate_for_calc
#                     amount_to_give += commission_in_usdt
#                     final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_usdt:.2f} USDT)"
#             else:
#                 amount_to_give_initial = amount_entered
#                 amount_to_get_calculated = amount_to_give_initial * current_rate_for_calc
#                 amount_to_give = amount_to_give_initial
#                 amount_to_get = amount_to_get_calculated
#                 if amount_to_get_calculated < MIN_THB_FOR_NO_COMMISSION and amount_to_get_calculated > 0:
#                     commission_in_usdt = COMMISSION_THB_AMOUNT / current_rate_for_calc
#                     amount_to_give += commission_in_usdt
#                     final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_usdt:.2f} USDT)"
#
#         elif currency_from == "RUB":
#             display_rate_text_for_deal = f"1 RUB = {current_rate_for_calc:.4f} THB"
#             if input_type == "input_thb":
#                 amount_to_get = amount_entered
#                 amount_to_give = amount_to_get / current_rate_for_calc
#                 if amount_to_get < MIN_THB_FOR_NO_COMMISSION and amount_to_get > 0:
#                     commission_in_rub = COMMISSION_THB_AMOUNT / current_rate_for_calc
#                     amount_to_give += commission_in_rub
#                     final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_rub:.2f} RUB)"
#             else:
#                 amount_to_give_initial = amount_entered
#                 amount_to_get_calculated = amount_to_give_initial * current_rate_for_calc
#                 amount_to_give = amount_to_give_initial
#                 amount_to_get = amount_to_get_calculated
#                 if amount_to_get_calculated < MIN_THB_FOR_NO_COMMISSION and amount_to_get_calculated > 0:
#                     commission_in_rub = COMMISSION_THB_AMOUNT / current_rate_for_calc
#                     amount_to_give += commission_in_rub
#                     final_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é {COMMISSION_THB_AMOUNT:.0f} THB ‚âà {commission_in_rub:.2f} RUB)"
#
#         if amount_to_get <= 0 or amount_to_give <= 0:
#             await message.answer("–°—É–º–º–∞ –æ–±–º–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É.")
#             return
#
#         new_request_in_db = await db.create_exchange_request(
#             tg_id=user_tg_id,
#             currency_from=currency_from,
#             currency_to=currency_to,
#             give=round(amount_to_give, 8 if currency_from == "USDT" else 2),
#             rate=fixed_rate_for_calculation_str,
#             get=round(amount_to_get, 2),
#         )
#
#         if not new_request_in_db:
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
#                                  reply_markup=get_main_keyboard())
#             await state.clear()
#             return
#
#         request_id = new_request_in_db.id
#
#         await state.update_data(
#             request_id=request_id,
#             final_amount_to_give=amount_to_give,
#             final_amount_to_get=amount_to_get,
#             final_commission_text=final_commission_text
#         )
#
#         safe_receive_type = html.escape(receive_type)
#         safe_display_rate = html.escape(display_rate_text_for_deal)
#         safe_currency_from = html.escape(currency_from)
#         safe_commission_text = html.escape(final_commission_text)
#         safe_currency_to = html.escape(currency_to if currency_to else "THB")  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ currency_to –Ω–µ "THB"
#
#         text_to_confirm = (
#             "üí± <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞</b>\n\n"
#             f"üíå –ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n"
#             f"üí® {safe_receive_type}\n"
#             f"üí± –ö—É—Ä—Å: <b>{safe_display_rate}</b> (–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏)\n"
#             f"üí∏ –í—ã –æ—Ç–¥–∞—ë—Ç–µ: <b>{amount_to_give:.2f} {safe_currency_from}</b>{safe_commission_text}\n"
#             f"üí∞ –ü–æ–ª—É—á–∞–µ—Ç–µ: <b>{amount_to_get:.2f} {safe_currency_to}</b>\n\n"
#             "‚ùï<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:</b>"
#         )
#         await message.answer(
#             text_to_confirm,
#             reply_markup=inline_keyboards.get_confirm_exchange_keyboard(),
#             parse_mode="HTML"
#         )
#     except ValueError:
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
#     except Exception as e:
#         logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_amount_input:")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")

@router.message(StateFilter(None), F.text.regexp(r'^\d+([\.,]\d+)?$'))
async def handle_amount_input(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        currency_from = data.get("currency_from")
        if not currency_from:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É–º–º–∞ '{message.text}' –æ—Ç {get_user_display(message.from_user)} –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ FSM.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (–∏ —É–∂–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ RATE_ADJUSTMENT_PERCENTAGE) –∫—É—Ä—Å –∏–∑ FSM
        fixed_adjusted_rate_str = data.get("exchange_rate_str")
        if not fixed_adjusted_rate_str:
            logging.error(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: exchange_rate_str –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM –¥–ª—è {message.from_user.id} –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã.")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ–±–º–µ–Ω –∑–∞–Ω–æ–≤–æ.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return

        # –≠—Ç–æ –≤–∞—à –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ (—É–∂–µ —Å —É—á–µ—Ç–æ–º 10% "–¥–µ–ª—å—Ç—ã")
        exchange_rate_for_calc = float(fixed_adjusted_rate_str)

        amount_str = message.text.replace(',', '.')
        amount_entered_by_user = float(amount_str)  # –°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_tg_id = message.from_user.id

        receive_type = data.get("receive_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        currency_to = data.get("currency_to")  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å "THB"
        input_type = data.get("input_type")  # –ö–∞–∫—É—é –≤–∞–ª—é—Ç—É –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        final_amount_to_give_by_user = 0.0  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏—Ç–æ–≥–µ –æ—Ç–¥–∞—Å—Ç (–≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω—É—é –º–∏–Ω. –∫–æ–º–∏—Å—Å–∏—é)
        final_amount_to_get_by_user = 0.0  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏—Ç (—É–∂–µ —Å –≤—ã—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π)

        min_commission_text = ""  # –¢–µ–∫—Å—Ç –ø—Ä–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é (300 THB)
        exchanger_fee_thb = 0.0  # –°—É–º–º–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞ –≤ THB
        exchanger_fee_text = ""  # –¢–µ–∫—Å—Ç –ø—Ä–æ –∫–æ–º–∏—Å—Å–∏—é –æ–±–º–µ–Ω–Ω–∏–∫–∞

        # --- –®–∞–≥ 1: –†–∞—Å—á–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞, –Ω–æ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ ---
        preliminary_amount_to_give = 0.0
        preliminary_amount_to_get_thb = 0.0  # –°—É–º–º–∞ –≤ THB –¥–æ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞

        if currency_from == "USDT":
            if input_type == "input_thb":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª, —Å–∫–æ–ª—å–∫–æ THB —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å
                preliminary_amount_to_get_thb = amount_entered_by_user
                preliminary_amount_to_give = preliminary_amount_to_get_thb / exchange_rate_for_calc
                if preliminary_amount_to_get_thb < MIN_THB_FOR_NO_COMMISSION and preliminary_amount_to_get_thb > 0:
                    commission_equivalent_give = MIN_COMMISSION_THB / exchange_rate_for_calc
                    preliminary_amount_to_give += commission_equivalent_give
                    min_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –¥–æ–ø. —Å–±–æ—Ä {MIN_COMMISSION_THB:.0f} THB ‚âà {commission_equivalent_give:.2f} {currency_from} –∑–∞ –º–∞–ª—É—é —Å—É–º–º—É)"
            else:  # input_usdt. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª, —Å–∫–æ–ª—å–∫–æ USDT —Ö–æ—á–µ—Ç –æ—Ç–¥–∞—Ç—å
                preliminary_amount_to_give_initial = amount_entered_by_user
                preliminary_amount_to_get_thb_calculated = preliminary_amount_to_give_initial * exchange_rate_for_calc

                preliminary_amount_to_give = preliminary_amount_to_give_initial
                preliminary_amount_to_get_thb = preliminary_amount_to_get_thb_calculated

                if preliminary_amount_to_get_thb_calculated < MIN_THB_FOR_NO_COMMISSION and preliminary_amount_to_get_thb_calculated > 0:
                    commission_equivalent_give = MIN_COMMISSION_THB / exchange_rate_for_calc
                    preliminary_amount_to_give += commission_equivalent_give
                    min_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –¥–æ–ø. —Å–±–æ—Ä {MIN_COMMISSION_THB:.0f} THB ‚âà {commission_equivalent_give:.2f} {currency_from} –∑–∞ –º–∞–ª—É—é —Å—É–º–º—É)"
                    # –°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é (preliminary_amount_to_get_thb) –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç —ç—Ç–æ–π –º–∏–Ω. –∫–æ–º–∏—Å—Å–∏–∏,
                    # —Ç.–∫. –º—ã —É–≤–µ–ª–∏—á–∏–ª–∏ —Å—É–º–º—É –∫ –æ—Ç–¥–∞—á–µ.

        elif currency_from == "RUB":
            if input_type == "input_thb":
                preliminary_amount_to_get_thb = amount_entered_by_user
                preliminary_amount_to_give = preliminary_amount_to_get_thb / exchange_rate_for_calc
                if preliminary_amount_to_get_thb < MIN_THB_FOR_NO_COMMISSION and preliminary_amount_to_get_thb > 0:
                    commission_equivalent_give = MIN_COMMISSION_THB / exchange_rate_for_calc
                    preliminary_amount_to_give += commission_equivalent_give
                    min_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –¥–æ–ø. —Å–±–æ—Ä {MIN_COMMISSION_THB:.0f} THB ‚âà {commission_equivalent_give:.2f} {currency_from} –∑–∞ –º–∞–ª—É—é —Å—É–º–º—É)"
            else:  # input_rub
                preliminary_amount_to_give_initial = amount_entered_by_user
                preliminary_amount_to_get_thb_calculated = preliminary_amount_to_give_initial * exchange_rate_for_calc

                preliminary_amount_to_give = preliminary_amount_to_give_initial
                preliminary_amount_to_get_thb = preliminary_amount_to_get_thb_calculated

                if preliminary_amount_to_get_thb_calculated < MIN_THB_FOR_NO_COMMISSION and preliminary_amount_to_get_thb_calculated > 0:
                    commission_equivalent_give = MIN_COMMISSION_THB / exchange_rate_for_calc
                    preliminary_amount_to_give += commission_equivalent_give
                    min_commission_text = f"\n(–≤–∫–ª—é—á–∞—è –¥–æ–ø. —Å–±–æ—Ä {MIN_COMMISSION_THB:.0f} THB ‚âà {commission_equivalent_give:.2f} {currency_from} –∑–∞ –º–∞–ª—É—é —Å—É–º–º—É)"

        if preliminary_amount_to_get_thb <= 0 or preliminary_amount_to_give <= 0:
            await message.answer("–°—É–º–º–∞ –æ–±–º–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à—É—é —Å—É–º–º—É.")
            return

        # --- –®–∞–≥ 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞ (EXCHANGER_FEE_PERCENTAGE) ---
        # –ö–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è –æ—Ç —Å—É–º–º—ã THB, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –±—ã –±–µ–∑ —ç—Ç–æ–π –∫–æ–º–∏—Å—Å–∏–∏
        exchanger_fee_thb = preliminary_amount_to_get_thb * EXCHANGER_FEE_PERCENTAGE
        final_amount_to_get_by_user = preliminary_amount_to_get_thb - exchanger_fee_thb

        # –¢–µ–∫—Å—Ç –ø—Ä–æ –∫–æ–º–∏—Å—Å–∏—é –æ–±–º–µ–Ω–Ω–∏–∫–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
        #if exchanger_fee_thb > 0.005:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è —Ö–æ—Ç—è –±—ã –ø–æ–ª–∫–æ–ø–µ–π–∫–∏ –±–∞—Ç–∞
         #   exchanger_fee_text = f"\n–ö–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞: {exchanger_fee_thb:.2f} THB ({EXCHANGER_FEE_PERCENTAGE * 100:.1f}%)"

        final_amount_to_give_by_user = preliminary_amount_to_give  # –°—É–º–º–∞ –∫ –æ—Ç–¥–∞—á–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞ (–ø–æ –í–∞—Ä–∏–∞–Ω—Ç—É 1)

        # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–æ–º–∏—Å—Å–∏–π
        all_commission_details_text = min_commission_text  # –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç –ø—Ä–æ –º–∏–Ω. –∫–æ–º–∏—Å—Å–∏—é (–µ—Å–ª–∏ –±—ã–ª–∞)
        # if min_commission_text and exchanger_fee_text: # –ï—Å–ª–∏ –æ–±–µ –∫–æ–º–∏—Å—Å–∏–∏
        #     all_commission_details_text += " –∏ " + exchanger_fee_text.lstrip('\n') # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        # elif exchanger_fee_text: # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—è –æ–±–º–µ–Ω–Ω–∏–∫–∞
        #     all_commission_details_text = exchanger_fee_text
        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if exchanger_fee_text:
            all_commission_details_text += exchanger_fee_text

        # --- –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—å –≤ –ë–î ---
        display_rate_text_for_deal = ""
        if currency_from == "USDT":
            display_rate_text_for_deal = f"1 USDT = {exchange_rate_for_calc:.2f} THB"
        elif currency_from == "RUB":
            display_rate_text_for_deal = f"1 RUB = {exchange_rate_for_calc:.4f} THB"

        new_request_in_db = await db.create_exchange_request(
            tg_id=user_tg_id,
            currency_from=currency_from,
            currency_to=currency_to,  # THB
            give=round(final_amount_to_give_by_user, 8 if currency_from == "USDT" else 2),
            rate=fixed_adjusted_rate_str,  # –≠—Ç–æ –≤–∞—à "—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ 10%" –∫—É—Ä—Å
            get=round(final_amount_to_get_by_user, 2),  # –≠—Ç–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π
        )

        if not new_request_in_db:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return

        request_id = new_request_in_db.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
        await state.update_data(
            request_id=request_id,
            final_amount_to_give=final_amount_to_give_by_user,  # –≠—Ç–æ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–¥–∞—Å—Ç
            final_amount_to_get=final_amount_to_get_by_user,  # –≠—Ç–æ —Ç–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç
            final_commission_text=all_commission_details_text  # –û–±—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –≤—Å–µ –∫–æ–º–∏—Å—Å–∏–∏
            # exchange_rate_str (–≤–∞—à —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å) —É–∂–µ –≤ FSM
        )

        safe_receive_type = html.escape(receive_type)
        safe_display_rate = html.escape(display_rate_text_for_deal)  # –≠—Ç–æ –≤–∞—à —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å
        safe_currency_from = html.escape(currency_from)
        safe_commission_details_text = html.escape(all_commission_details_text)
        safe_currency_to = html.escape(str(currency_to))

        text_to_confirm = (
            "üí± <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–±–º–µ–Ω–∞</b>\n\n"
            f"üíå –ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n"
            f"üí® {safe_receive_type}\n"
            f"üí± –ù–∞—à –∫—É—Ä—Å (–¥–æ –∫–æ–º–∏—Å—Å–∏–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∞): <b>{safe_display_rate}</b>\n"
            f"üí∏ –í—ã –æ—Ç–¥–∞—ë—Ç–µ: <b>{final_amount_to_give_by_user:.2f} {safe_currency_from}</b>{safe_commission_details_text}\n"
            f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –∫–æ–º–∏—Å—Å–∏–π): <b>{final_amount_to_get_by_user:.2f} {safe_currency_to}</b>\n\n"
            "‚ùï<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É:</b>"
        )
        await message.answer(
            text_to_confirm,
            reply_markup=inline_keyboards.get_confirm_exchange_keyboard(),
            parse_mode="HTML"
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_amount_input:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è.")

@router.callback_query(F.data == "confirm_exchange")
async def confirm_exchange_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data.get("request_id")
        currency_from = data.get("currency_from")
        amount_to_give = data.get("final_amount_to_give")
        amount_to_get = data.get("final_amount_to_get")

        if not all([request_id, currency_from, amount_to_give is not None, amount_to_get is not None]):
            await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                        show_alert=True)
            # ... (–∫–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ edit_text –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª) ...
            await state.clear()
            return

        await db.update_exchange_request_data(request_id=request_id, status=db.Status.pending_payment)

        payment_details_text = ""
        if currency_from == "USDT":
            payment_details_text = (
                "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount_to_give:.2f} USDT</b>\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: <b>{amount_to_get:.2f} THB</b>\n\n"
                "üìù <b>USDT (TRC20)</b>\n"
                "–ö–æ—à–µ–ª–µ–∫: <code>–í–ê–®_USDT_–ö–û–®–ï–õ–ï–ö_TRC20</code>\n"  # –ó–ê–ú–ï–ù–ò–¢–¨
                "–°–µ—Ç—å: TRC20\n\n"
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )
        elif currency_from == "RUB":
            payment_details_text = (
                "üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
                f"üí∏ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount_to_give:.2f} RUB</b>\n"
                f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: <b>{amount_to_get:.2f} THB</b>\n\n"
                "üìù <b>–†—É–±–ª–µ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥</b>\n"
                "–ù–æ–º–µ—Ä: <code>–í–ê–®_–ù–û–ú–ï–†_–ö–ê–†–¢–´_–ò–õ–ò_–¢–ï–õ–ï–§–û–ù–ê</code>\n"  # –ó–ê–ú–ï–ù–ò–¢–¨
                "–ë–∞–Ω–∫–∏: –°–±–µ—Ä–±–∞–Ω–∫, –ê–ª—å—Ñ–∞, –¢–∏–Ω—å–∫–æ—Ñ—Ñ (–∏–ª–∏ –≤–∞—à–∏ –±–∞–Ω–∫–∏)\n"
                "–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–ú–Ø –§–ê–ú–ò–õ–ò–Ø –ü–û–õ–£–ß–ê–¢–ï–õ–Ø\n\n"  # –ó–ê–ú–ï–ù–ò–¢–¨
                "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )

        await safe_edit_text(
            callback_query.message,
            payment_details_text,
            reply_markup=inline_keyboards.get_cancel_exchange_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state("waiting_for_payment_screenshot")
        await callback_query.answer()

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≤ confirm_exchange_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(F.photo, StateFilter("waiting_for_payment_screenshot"))
async def handle_payment_screenshot(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_tg_id = message.from_user.id
        username = message.from_user.username or f"id{user_tg_id}"

        request_id = data.get("request_id")
        receive_type = data.get("receive_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        currency_from = data.get("currency_from")
        currency_to = data.get("currency_to")
        amount_to_give = data.get("final_amount_to_give")
        amount_to_get = data.get("final_amount_to_get")
        actual_rate_str = data.get("exchange_rate_str")  # –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å
        final_commission_text = data.get("final_commission_text", "")

        if not request_id:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: request_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM –¥–ª—è {user_tg_id} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                                 reply_markup=get_main_keyboard())
            await state.clear()
            return

        await db.update_exchange_request_data(request_id=request_id, status=db.Status.processing)

        safe_username = html.escape(username)
        safe_currency_from = html.escape(currency_from)
        safe_currency_to = html.escape(currency_to)
        safe_receive_type = html.escape(receive_type)
        safe_actual_rate_str = html.escape(actual_rate_str)
        safe_commission_text = html.escape(final_commission_text)

        text_for_manager = (
            f"üíå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n"
            f"üí® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{safe_username} (tg_id: {user_tg_id})\n"
            f"üí± –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {safe_currency_from} ‚Üí {safe_currency_to}\n"
            f"üè¶ –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: {safe_receive_type}\n"
            f"–ö—É—Ä—Å: 1 {safe_currency_from} = {safe_actual_rate_str} {safe_currency_to}\n"
            f"üí∏ –û—Ç–¥–∞–ª: {amount_to_give:.2f} {safe_currency_from}{safe_commission_text}\n"
            f"üí∞ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {amount_to_get:.2f} {safe_currency_to}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É
        # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.bot.send_photo(
            chat_id=MANAGER_CHAT_ID,
            photo=message.photo[-1].file_id,
            # caption=text_for_manager, # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å caption –∫ —Ñ–æ—Ç–æ, –Ω–æ —Ç–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –ø–æ–¥ –Ω–∏–º
            # reply_markup=inline_keyboards.get_manager_action_keyboard(request_id)
        )
        await message.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=text_for_manager,
            reply_markup=inline_keyboards.get_manager_action_keyboard(str(request_id))
            # request_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è f-—Å—Ç—Ä–æ–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        )

        await message.answer(
            "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω –∏ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                             reply_markup=get_main_keyboard())
        await state.clear()


@router.callback_query(F.data.startswith("manager_confirm_"))
async def handle_manager_confirm(callback_query: types.CallbackQuery):
    try:
        request_id_str = callback_query.data.split("_")[-1]
        request_id = int(request_id_str)

        exchange_request = await db.get_exchange_request_by_id(request_id)  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å user
        if not exchange_request or not hasattr(exchange_request, 'user') or not exchange_request.user:
            await callback_query.answer(f"–ó–∞—è–≤–∫–∞ #{request_id} –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            await safe_edit_text(callback_query.message,
                                 f"{callback_query.message.text}\n\n‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{request_id} –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                                 reply_markup=None)
            return

        user_id_to_notify = exchange_request.user.tg_id

        await db.update_exchange_request_data(request_id=request_id, status=db.Status.pending_get)

        edited_manager_text = f"{callback_query.message.text}\n\n‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        await safe_edit_text(callback_query.message, edited_manager_text, reply_markup=None)

        await callback_query.bot.send_message(
            user_id_to_notify,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º! –°—Ä–µ–¥—Å—Ç–≤–∞ –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–¥–∞—á–µ."
        )

        message_text_for_manager = callback_query.message.text  # –¢–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        receive_type_from_text = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –ò—â–µ–º —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –Ω–µ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π, –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
        if "–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ" in message_text_for_manager:
            receive_type_from_text = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ"
        elif "–°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ" in message_text_for_manager:
            receive_type_from_text = "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ"

        if receive_type_from_text == "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –æ—Ç–µ–ª–µ":
            await callback_query.bot.send_message(
                user_id_to_notify,
                "üè® <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –≤ –æ—Ç–µ–ª–µ:</b>\n\n"
                "1. –ü—Ä–∏–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: <a href='https://maps.app.goo.gl/YUBKHTMEw29DJby18'>–û—Ç–µ–ª—å \"–ù–∞–∑–≤–∞–Ω–∏–µ –û—Ç–µ–ª—è\"</a>\n"  # –ó–ê–ú–ï–ù–ò–¢–¨
                "2. –ü–æ–∫–∞–∂–∏—Ç–µ –Ω–∞ —Ä–µ—Ü–µ–ø—à–µ–Ω–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∞—à ID –∑–∞—è–≤–∫–∏.\n"
                "3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.",
                parse_mode="HTML"
            )
        elif receive_type_from_text == "–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ –±–∞–Ω–∫–æ–º–∞—Ç–µ":
            video_dir = "Video"
            if os.path.exists(video_dir) and os.path.isdir(video_dir):
                for video_file in sorted(os.listdir(video_dir)):  # sorted –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
                    if video_file.lower().endswith(('.mp4', '.avi', '.mov')):
                        video_path = os.path.join(video_dir, video_file)
                        try:
                            await callback_query.bot.send_video(user_id_to_notify, FSInputFile(video_path))
                        except Exception as e_vid:
                            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {video_path}: {e_vid}")
            else:
                logging.warning(f"–ü–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ '{video_dir}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            pictures_dir = "pictures"
            for i in range(1, 3):
                image_path = os.path.join(pictures_dir, f"{i}.jpg")
                if os.path.exists(image_path):
                    try:
                        await callback_query.bot.send_photo(user_id_to_notify, FSInputFile(image_path))
                    except Exception as e_img:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e_img}")
                else:
                    logging.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        await callback_query.bot.send_message(
            user_id_to_notify,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}:",
            reply_markup=inline_keyboards.get_receipt_confirmation_keyboard(request_id)
        )
        await callback_query.answer()

    except Exception as e:
        logging.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º (request_id: {callback_query.data.split('_')[-1]}):")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data.startswith("manager_reject_"))
async def handle_manager_reject(callback_query: types.CallbackQuery):
    try:
        request_id_str = callback_query.data.split("_")[-1]
        request_id = int(request_id_str)

        exchange_request = await db.get_exchange_request_by_id(request_id)
        if not exchange_request or not hasattr(exchange_request, 'user') or not exchange_request.user:
            await callback_query.answer(f"–ó–∞—è–≤–∫–∞ #{request_id} –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
            # ... (–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ–± –æ—à–∏–±–∫–µ)
            return

        user_tg_id_to_notify = exchange_request.user.tg_id
        user_username_to_contact = html.escape(str(exchange_request.user.username or f"id{user_tg_id_to_notify}"))

        await db.update_exchange_request_data(request_id=request_id, status=db.Status.cancelled)

        edited_manager_text = f"{callback_query.message.text}\n\n‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        await safe_edit_text(callback_query.message, edited_manager_text, reply_markup=None)

        await callback_query.bot.send_message(
            user_tg_id_to_notify,
            f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        )

        await callback_query.bot.send_message(
            MANAGER_CHAT_ID,
            f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{user_username_to_contact} –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        await callback_query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

    except Exception as e:
        logging.exception(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º (request_id: {callback_query.data.split('_')[-1]}):")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data.startswith("receipt_confirmed_"))
async def handle_receipt_confirmation(callback_query: types.CallbackQuery):
    try:
        prefix = "receipt_confirmed_"
        request_id_str = callback_query.data[len(prefix):]
        request_id = int(request_id_str)

        updated_request = await db.update_exchange_request_data(request_id=request_id, status=db.Status.successful)

        if updated_request:
            logging.info(
                f"User {callback_query.from_user.id} confirmed receipt for request {request_id}. Status: {updated_request.status.value}")
            await safe_edit_text(
                callback_query.message,
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}! –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.",
                reply_markup=None
            )
            await callback_query.bot.send_message(MANAGER_CHAT_ID,
                                                  f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}. –û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω.")
        else:
            logging.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É {request_id} –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback_query.from_user.id}.")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", show_alert=True)

        await callback_query.answer()
    except ValueError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback_data: {callback_query.data} –≤ handle_receipt_confirmation")
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (callback_data: {callback_query.data}):")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data.startswith("support_contact_"))
async def handle_support_contact(callback_query: types.CallbackQuery):
    try:
        prefix = "support_contact_"
        request_id_str = callback_query.data[len(prefix):]
        request_id = int(request_id_str)

        await safe_edit_text(
            callback_query.message,
            "üë®‚Äçüíº –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @–í–ê–®_–°–ê–ü–ü–û–†–¢_–Æ–ó–ï–†–ù–ï–ô–ú\n\n"  # –ó–ê–ú–ï–ù–ò–¢–¨
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: #{request_id}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤:",
            reply_markup=inline_keyboards.get_receipt_confirmation_keyboard(request_id)
        )
        await callback_query.answer()
    except ValueError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback_data: {callback_query.data} –≤ handle_support_contact")
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (callback_data: {callback_query.data}):")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "cancel_exchange")
async def cancel_exchange_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        request_id = data.get("request_id")

        if request_id:
            updated_request = await db.update_exchange_request_data(request_id=request_id, status=db.Status.cancelled)
            if updated_request:
                logging.info(
                    f"User {callback_query.from_user.id} cancelled exchange request {request_id}. Status set to Cancelled.")
            else:
                logging.warning(
                    f"User {callback_query.from_user.id} tried to cancel request {request_id}, but it was not found or update failed.")
        else:
            logging.info(
                f"User {callback_query.from_user.id} cancelled exchange before request was created in DB (request_id is None).")

        await state.clear()

        try:
            await safe_edit_text(
                callback_query.message,
                "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.\n\nüí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–±–º–µ–Ω:",
                reply_markup=inline_keyboards.get_exchange_main_keyboard()
            )
        except Exception:
            await callback_query.message.answer(
                "‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.\n\nüí® –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–±–º–µ–Ω:",
                reply_markup=inline_keyboards.get_exchange_main_keyboard()
            )
        await callback_query.answer("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.callback_query(F.data == "history_exchanges")
async def show_exchange_history_handler(callback_query: types.CallbackQuery):
    try:
        user_tg_id = callback_query.from_user.id
        user_role = await db.get_user_role(tg_id=user_tg_id)

        history_text_header = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ–±–º–µ–Ω–æ–≤:</b>\n\n"
        history_text_body = ""
        exchanges_to_display = []
        reply_markup_history = None

        if user_role == db.Role.client:
            user_history = await db.get_user_exchange_history(tg_id=user_tg_id, include_creation_status=True)
            exchanges_to_display = user_history[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            if not exchanges_to_display:
                history_text_body = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤."  # –ë–µ–∑ —Ç–µ–≥–æ–≤, —Ç.–∫. header —É–∂–µ —Å —Ç–µ–≥–∞–º–∏
            reply_markup_history = inline_keyboards.get_profile_main_user_keyboard()

        elif user_role in [db.Role.admin, db.Role.manager]:
            all_history = await db.get_last_20_all_users_exchange_history()  # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user
            exchanges_to_display = all_history
            if not exchanges_to_display:
                history_text_body = "–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±–º–µ–Ω–æ–≤."
            # reply_markup_history –¥–ª—è –∞–¥–º–∏–Ω–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å None –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∞–¥–º–∏–Ω—Å–∫—É—é "–Ω–∞–∑–∞–¥"

        else:  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –∏–ª–∏ None
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.", show_alert=True)
            return

        if exchanges_to_display:
            for item in exchanges_to_display:
                user_info_for_admin = ""
                if user_role in [db.Role.admin, db.Role.manager] and hasattr(item, 'user') and item.user:
                    safe_username = html.escape(str(item.user.username or 'N/A'))
                    user_info_for_admin = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item.user.tg_id} (@{safe_username})\n"

                safe_currency_from = html.escape(str(item.currency_from))
                safe_currency_to = html.escape(str(item.currency_to))
                rate_value_str = str(item.rate)
                safe_rate_display_str = html.escape(rate_value_str)
                safe_status_value = html.escape(str(item.status.value))

                rate_line = f"–ö—É—Ä—Å: 1 {safe_currency_from} = {safe_rate_display_str} {safe_currency_to}" \
                    if item.rate and rate_value_str.lower() != "n/a" else "–ö—É—Ä—Å: –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–¥–µ–ª–∫–∏"

                history_text_body += (
                    f"<b>–ó–∞—è–≤–∫–∞ #{item.id}</b>\n"
                    f"{user_info_for_admin}"
                    f"üóì –î–∞—Ç–∞: {item.date.strftime('%Y-%m-%d %H:%M')}\n"
                    f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {safe_currency_from} ‚Üí {safe_currency_to}\n"
                    f"üí∏ –û—Ç–¥–∞–ª: {item.give:.2f} {safe_currency_from}\n"
                    f"üí∞ –ü–æ–ª—É—á–∏–ª: {item.get:.2f} {safe_currency_to}\n"
                    f"{rate_line}\n"
                    f"–°—Ç–∞—Ç—É—Å: {safe_status_value}\n\n"
                )

        # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        final_history_text = history_text_header
        if history_text_body:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ (–∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏")
            final_history_text += history_text_body
        elif not exchanges_to_display:  # –ï—Å–ª–∏ —Ç–µ–ª–æ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ)
            final_history_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."

        await safe_edit_text(
            callback_query.message,
            final_history_text.strip(),
            reply_markup=reply_markup_history,
            parse_mode="HTML"
        )
        await callback_query.answer()

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±–º–µ–Ω–æ–≤:")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def safe_edit_text(message: types.Message, text: str, **kwargs):
    try:
        await message.edit_text(text, **kwargs)
    except Exception as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            logging.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text: {str(e)}. –°–æ–æ–±—â–µ–Ω–∏–µ: ID={message.message_id}, ChatID={message.chat.id}, Text: {text[:100]}")


@router.callback_query(F.data == "back_to_profile")
async def back_to_profile_handler(callback_query: types.CallbackQuery):
    try:
        tg_id = callback_query.from_user.id
        user_history = await db.get_user_exchange_history(tg_id=tg_id, include_creation_status=False)
        successful_exchanges_count = sum(1 for item in user_history if item.status == db.Status.successful)

        await safe_edit_text(
            callback_query.message,
            f"üí¢–í–∞—à –ø—Ä–æ—Ñ–∏–ª—åüí¢\n\n"
            f"üí´–í–∞—à id: {tg_id}\n"
            f"üí´–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–º–µ–Ω–æ–≤: {successful_exchanges_count} üéàüéà\n",
            reply_markup=inline_keyboards.get_profile_main_user_keyboard()
        )
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ back_to_profile_handler: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
